test compile precise-output
set enable_simd
target x86_64 has_avx

function %f1(i8x16) -> i8 {
block0(v0: i8x16):
  v1 = extractlane v0, 1
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpextrb rax, xmm0, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpextrb eax, xmm0, 1
;   mov rsp, rbp
;   pop rbp
;   ret

function %f2(i16x8) -> i16 {
block0(v0: i16x8):
  v1 = extractlane v0, 1
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpextrw rax, xmm0, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpextrw eax, xmm0, 1
;   mov rsp, rbp
;   pop rbp
;   ret

function %f3(i32x4) -> i32 {
block0(v0: i32x4):
  v1 = extractlane v0, 1
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpextrd rax, xmm0, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpextrd eax, xmm0, 1
;   mov rsp, rbp
;   pop rbp
;   ret

function %f4(i64x2) -> i64 {
block0(v0: i64x2):
  v1 = extractlane v0, 1
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpextrq rax, xmm0, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpextrq rax, xmm0, 1
;   mov rsp, rbp
;   pop rbp
;   ret

function %f5(f32x4) -> f32 {
block0(v0: f32x4):
  v1 = extractlane v0, 1
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpshufd xmm0, xmm0, 1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpshufd xmm0, xmm0, 1
;   mov rsp, rbp
;   pop rbp
;   ret

function %f6(f64x2) -> f64 {
block0(v0: f64x2):
  v1 = extractlane v0, 1
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpshufd xmm0, xmm0, 238
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpshufd xmm0, xmm0, 0xee
;   mov rsp, rbp
;   pop rbp
;   ret

function %extract_i8x16_lane0_to_memory(i8x16, i64) {
block0(v0: i8x16, v1: i64):
  v2 = extractlane v0, 0
  store v2, v1
  return
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpextrb qword ptr [rdi + 0x0], xmm0, 0
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpextrb byte ptr [rdi], xmm0, 0 ; trap: heap_oob
;   mov rsp, rbp
;   pop rbp
;   ret

function %extract_i16x8_lane0_to_memory(i16x8, i64) {
block0(v0: i16x8, v1: i64):
  v2 = extractlane v0, 0
  store v2, v1
  return
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpextrw qword ptr [rdi + 0x0], xmm0, 0
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpextrw word ptr [rdi], xmm0, 0 ; trap: heap_oob
;   mov rsp, rbp
;   pop rbp
;   ret

function %extract_i32x4_lane0_to_memory(i32x4, i64) {
block0(v0: i32x4, v1: i64):
  v2 = extractlane v0, 0
  store v2, v1
  return
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpextrd qword ptr [rdi + 0x0], xmm0, 0
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpextrd dword ptr [rdi], xmm0, 0 ; trap: heap_oob
;   mov rsp, rbp
;   pop rbp
;   ret

function %extract_f32x4_lane0_to_memory(f32x4, i64) {
block0(v0: f32x4, v1: i64):
  v2 = extractlane v0, 0
  store v2, v1
  return
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vmovss xmmword ptr [rdi + 0x0], xmm0
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vmovss dword ptr [rdi], xmm0 ; trap: heap_oob
;   mov rsp, rbp
;   pop rbp
;   ret

function %extract_i64x2_lane0_to_memory(i64x2, i64) {
block0(v0: i64x2, v1: i64):
  v2 = extractlane v0, 0
  store v2, v1
  return
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpextrq qword ptr [rdi + 0x0], xmm0, 0
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpextrq qword ptr [rdi], xmm0, 0 ; trap: heap_oob
;   mov rsp, rbp
;   pop rbp
;   ret

function %extract_f64x2_lane0_to_memory(f64x2, i64) {
block0(v0: f64x2, v1: i64):
  v2 = extractlane v0, 0
  store v2, v1
  return
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vmovsd xmmword ptr [rdi + 0x0], xmm0
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vmovsd qword ptr [rdi], xmm0 ; trap: heap_oob
;   mov rsp, rbp
;   pop rbp
;   ret

