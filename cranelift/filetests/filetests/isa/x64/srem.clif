test compile precise-output
target x86_64

function %f1(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
  v2 = srem v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   cbw al, al
;   checked_srem_seq al, al, sil
;   shr rax, rax, 0x8
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   cbw
;   cmp sil, 0xff
;   jne 0x1d
;   mov eax, 0
;   jmp 0x20
;   idiv sil ; trap: int_divz
;   shr rax, 8
;   mov rsp, rbp
;   pop rbp
;   ret

function %f2(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = srem v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   cwd dx, ax
;   checked_srem_seq ax, dx, ax, dx, si
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   cwd
;   cmp si, -1
;   jne 0x1d
;   mov edx, 0
;   jmp 0x20
;   idiv si ; trap: int_divz
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret

function %f3(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = srem v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   cdq edx, eax
;   checked_srem_seq eax, edx, eax, edx, esi
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   cdq
;   cmp esi, -1
;   jne 0x1b
;   mov edx, 0
;   jmp 0x1d
;   idiv esi ; trap: int_divz
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret

function %f4(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = srem v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   cqo rdx, rax
;   checked_srem_seq rax, rdx, rax, rdx, rsi
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   cqo
;   cmp rsi, -1
;   jne 0x1d
;   mov edx, 0
;   jmp 0x20
;   idiv rsi ; trap: int_divz
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret

function %i8_imm(i8) -> i8 {
block0(v0: i8):
  v1 = iconst.i8 17
  v2 = srem v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   cbw al, al
;   mov edx, 0x11
;   idiv al, dl, al ; trap=int_divz
;   shr rax, rax, 0x8
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   cbw
;   mov edx, 0x11
;   idiv dl ; trap: int_divz
;   shr rax, 8
;   mov rsp, rbp
;   pop rbp
;   ret

function %i16_imm(i16) -> i16 {
block0(v0: i16):
  v1 = iconst.i16 17
  v2 = srem v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   cwd dx, ax
;   mov r8d, 0x11
;   idiv ax, dx, ax, dx, r8w ; trap=int_divz
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   cwd
;   mov r8d, 0x11
;   idiv r8w ; trap: int_divz
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret

function %i32_imm(i32) -> i32 {
block0(v0: i32):
  v1 = iconst.i32 17
  v2 = srem v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   cdq edx, eax
;   mov r8d, 0x11
;   idiv eax, edx, eax, edx, r8d ; trap=int_divz
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   cdq
;   mov r8d, 0x11
;   idiv r8d ; trap: int_divz
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret

function %i64_imm(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i64 17
  v2 = srem v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   cqo rdx, rax
;   mov r8d, 0x11
;   idiv rax, rdx, rax, rdx, r8 ; trap=int_divz
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   cqo
;   mov r8d, 0x11
;   idiv r8 ; trap: int_divz
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret

