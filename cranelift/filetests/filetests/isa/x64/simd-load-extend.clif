test compile precise-output
set enable_simd
target x86_64

function %uload8x8(i64) -> i16x8 {
block0(v0: i64):
  v1 = uload8x8 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   pmovzxbw xmm0, qword ptr [rdi + 0x0]
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   pmovzxbw xmm0, qword ptr [rdi] ; trap: heap_oob
;   mov rsp, rbp
;   pop rbp
;   ret

function %sload8x8(i64) -> i16x8 {
block0(v0: i64):
  v1 = sload8x8 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   pmovsxbw xmm0, qword ptr [rdi + 0x0]
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   pmovsxbw xmm0, qword ptr [rdi] ; trap: heap_oob
;   mov rsp, rbp
;   pop rbp
;   ret

function %uload16x4(i64) -> i32x4 {
block0(v0: i64):
  v1 = uload16x4 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   pmovzxwd xmm0, qword ptr [rdi + 0x0]
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   pmovzxwd xmm0, qword ptr [rdi] ; trap: heap_oob
;   mov rsp, rbp
;   pop rbp
;   ret

function %sload16x4(i64) -> i32x4 {
block0(v0: i64):
  v1 = sload16x4 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   pmovsxwd xmm0, qword ptr [rdi + 0x0]
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   pmovsxwd xmm0, qword ptr [rdi] ; trap: heap_oob
;   mov rsp, rbp
;   pop rbp
;   ret

function %uload32x2(i64) -> i64x2 {
block0(v0: i64):
  v1 = uload32x2 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   pmovzxdq xmm0, qword ptr [rdi + 0x0]
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   pmovzxdq xmm0, qword ptr [rdi] ; trap: heap_oob
;   mov rsp, rbp
;   pop rbp
;   ret

function %sload32x2(i64) -> i64x2 {
block0(v0: i64):
  v1 = sload32x2 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   pmovsxdq xmm0, qword ptr [rdi + 0x0]
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   pmovsxdq xmm0, qword ptr [rdi] ; trap: heap_oob
;   mov rsp, rbp
;   pop rbp
;   ret

