test compile precise-output
target x86_64

function %f1(i16x8, i16x8) -> i8x16 {
block0(v0: i16x8, v1: i16x8):
  v2 = snarrow v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   packsswb xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   packsswb xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret

function %f2(i32x4, i32x4) -> i16x8 {
block0(v0: i32x4, v1: i32x4):
  v2 = snarrow v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   packssdw xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   packssdw xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret

function %f3(f64x2) -> i32x4 {
block0(v0: f64x2):
  v1 = fcvt_to_sint_sat.i64x2 v0
  v2 = vconst.i64x2 0x00
  v3 = snarrow v1, v2
  return v3
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movdqa xmm3, xmm0
;   cmppd xmm3, xmm3, xmm0, 0x0
;   andps xmm3, xmm3, const(0)
;   movdqa xmm6, xmm0
;   minpd xmm6, xmm6, xmm3
;   cvttpd2dq xmm0, xmm6
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movdqa xmm3, xmm0
;   cmpeqpd xmm3, xmm0
;   andps xmm3, xmmword ptr [rip + 0x1c]
;   movdqa xmm6, xmm0
;   minpd xmm6, xmm3
;   cvttpd2dq xmm0, xmm6
;   mov rsp, rbp
;   pop rbp
;   ret
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add al, al

function %f4(i16x8, i16x8) -> i8x16 {
block0(v0: i16x8, v1: i16x8):
  v2 = unarrow v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   packuswb xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   packuswb xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret

function %f5(i32x4, i32x4) -> i16x8 {
block0(v0: i32x4, v1: i32x4):
  v2 = unarrow v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   packusdw xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   packusdw xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret

