test compile precise-output
set enable_llvm_abi_extensions=true
set unwind_info=true
target x86_64

function %f0(i64, i64, i64, i64) -> i64 windows_fastcall {
block0(v0: i64, v1: i64, v2: i64, v3: i64):
  return v0
}

; VCode:
;   push rbp
;   unwind PushFrameRegs { offset_upward_to_caller_sp: 16 }
;   mov rbp, rsp
;   unwind DefineNewFrame { offset_upward_to_caller_sp: 16, offset_downward_to_clobbers: 0 }
; block0:
;   mov rax, rcx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rcx
;   mov rsp, rbp
;   pop rbp
;   ret

function %f1(i64, i64, i64, i64) -> i64 windows_fastcall {
block0(v0: i64, v1: i64, v2: i64, v3: i64):
  return v1
}

; VCode:
;   push rbp
;   unwind PushFrameRegs { offset_upward_to_caller_sp: 16 }
;   mov rbp, rsp
;   unwind DefineNewFrame { offset_upward_to_caller_sp: 16, offset_downward_to_clobbers: 0 }
; block0:
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret

function %f2(i64, i64, i64, i64) -> i64 windows_fastcall {
block0(v0: i64, v1: i64, v2: i64, v3: i64):
  return v2
}

; VCode:
;   push rbp
;   unwind PushFrameRegs { offset_upward_to_caller_sp: 16 }
;   mov rbp, rsp
;   unwind DefineNewFrame { offset_upward_to_caller_sp: 16, offset_downward_to_clobbers: 0 }
; block0:
;   mov rax, r8
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, r8
;   mov rsp, rbp
;   pop rbp
;   ret

function %f3(i64, i64, i64, i64) -> i64 windows_fastcall {
block0(v0: i64, v1: i64, v2: i64, v3: i64):
  return v3
}

; VCode:
;   push rbp
;   unwind PushFrameRegs { offset_upward_to_caller_sp: 16 }
;   mov rbp, rsp
;   unwind DefineNewFrame { offset_upward_to_caller_sp: 16, offset_downward_to_clobbers: 0 }
; block0:
;   mov rax, r9
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, r9
;   mov rsp, rbp
;   pop rbp
;   ret

function %f4(i64, i64, f64, i64) -> f64 windows_fastcall {
block0(v0: i64, v1: i64, v2: f64, v3: i64):
  return v2
}

; VCode:
;   push rbp
;   unwind PushFrameRegs { offset_upward_to_caller_sp: 16 }
;   mov rbp, rsp
;   unwind DefineNewFrame { offset_upward_to_caller_sp: 16, offset_downward_to_clobbers: 0 }
; block0:
;   movdqa xmm0, xmm2
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movdqa xmm0, xmm2
;   mov rsp, rbp
;   pop rbp
;   ret

function %f5(i64, i64, f64, i64) -> i64 windows_fastcall {
block0(v0: i64, v1: i64, v2: f64, v3: i64):
  return v3
}

; VCode:
;   push rbp
;   unwind PushFrameRegs { offset_upward_to_caller_sp: 16 }
;   mov rbp, rsp
;   unwind DefineNewFrame { offset_upward_to_caller_sp: 16, offset_downward_to_clobbers: 0 }
; block0:
;   mov rax, r9
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, r9
;   mov rsp, rbp
;   pop rbp
;   ret

function %f6(i64, i64, i64, i64, i64, i64) -> i64 windows_fastcall {
block0(v0: i64, v1: i64, v2: i64, v3: i64, v4: i64, v5: i64):
  return v5

;; This is truly odd (because of the regalloc ordering), but it works. Note
;; that we're spilling and using rsi, which is a callee-save in fastcall, because
;; the regalloc order is optimized for SysV. Also note that because we copy args
;; out of their input locations to separate vregs, we have a spurious load
;; from [rbp+48]. Ordinarily these moves are coalesced because the dest vreg
;; is allocated as a caller-save (volatile), but here again we allocate rsi
;; first and so have to spill it (and consequently don't coalesce).
;;
;; TODO(#2704): fix regalloc's register priority ordering!
}

; VCode:
;   push rbp
;   unwind PushFrameRegs { offset_upward_to_caller_sp: 16 }
;   mov rbp, rsp
;   unwind DefineNewFrame { offset_upward_to_caller_sp: 16, offset_downward_to_clobbers: 0 }
; block0:
;   mov r8, qword ptr [rbp + 0x30]
;   mov rax, qword ptr [rbp + 0x38]
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov r8, qword ptr [rbp + 0x30]
;   mov rax, qword ptr [rbp + 0x38]
;   mov rsp, rbp
;   pop rbp
;   ret

function %f7(i128, i64, i128, i128) -> i128 windows_fastcall {
block0(v0: i128, v1: i64, v2: i128, v3: i128):
  return v3
}

; VCode:
;   push rbp
;   unwind PushFrameRegs { offset_upward_to_caller_sp: 16 }
;   mov rbp, rsp
;   unwind DefineNewFrame { offset_upward_to_caller_sp: 16, offset_downward_to_clobbers: 0 }
; block0:
;   mov r8, qword ptr [rbp + 0x30]
;   mov rax, qword ptr [rbp + 0x38]
;   mov rdx, qword ptr [rbp + 0x40]
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov r8, qword ptr [rbp + 0x30]
;   mov rax, qword ptr [rbp + 0x38]
;   mov rdx, qword ptr [rbp + 0x40]
;   mov rsp, rbp
;   pop rbp
;   ret

function %f8(i64) -> i64 windows_fastcall {
  sig0 = (i64, i64, f64, f64, i64, i64) -> i64 windows_fastcall
  fn0 = %g sig0

block0(v0: i64):
  v1 = fcvt_from_sint.f64 v0
  v2 = call fn0(v0, v0, v1, v1, v0, v0)
  return v2
}

; VCode:
;   push rbp
;   unwind PushFrameRegs { offset_upward_to_caller_sp: 16 }
;   mov rbp, rsp
;   unwind DefineNewFrame { offset_upward_to_caller_sp: 16, offset_downward_to_clobbers: 0 }
; block0:
;   cvtsi2sd xmm3, rcx
;   sub rsp, rsp, $48
;   virtual_sp_offset_adjust 48
;   mov qword ptr [rsp + 0x20], rcx
;   mov qword ptr [rsp + 0x28], rcx
;   mov rdx, rcx
;   load_ext_name r11, %g+0
;   mov rcx, rdx
;   movdqa xmm2, xmm3
;   call *r11
;   add rsp, rsp, $48
;   virtual_sp_offset_adjust -48
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   cvtsi2sd xmm3, rcx
;   sub rsp, 0x30
;   mov qword ptr [rsp + 0x20], rcx
;   mov qword ptr [rsp + 0x28], rcx
;   mov rdx, rcx
;   movabs r11, 0 ; reloc_external Abs8 %g 0
;   mov rcx, rdx
;   movdqa xmm2, xmm3
;   call r11
;   add rsp, 0x30
;   mov rsp, rbp
;   pop rbp
;   ret

function %f9(i64) -> f64 windows_fastcall {
block0(v0: i64):
  v1 = load.f64 v0+0
  v2 = load.f64 v0+8
  v3 = load.f64 v0+16
  v4 = load.f64 v0+24
  v5 = load.f64 v0+32
  v6 = load.f64 v0+40
  v7 = load.f64 v0+48
  v8 = load.f64 v0+56
  v9 = load.f64 v0+64
  v10 = load.f64 v0+72
  v11 = load.f64 v0+80
  v12 = load.f64 v0+88
  v13 = load.f64 v0+96
  v14 = load.f64 v0+104
  v15 = load.f64 v0+112
  v16 = load.f64 v0+120
  v17 = load.f64 v0+128
  v18 = load.f64 v0+136
  v19 = load.f64 v0+144
  v20 = load.f64 v0+152

  v21 = fadd.f64 v1, v2
  v22 = fadd.f64 v3, v4
  v23 = fadd.f64 v5, v6
  v24 = fadd.f64 v7, v8
  v25 = fadd.f64 v9, v10
  v26 = fadd.f64 v11, v12
  v27 = fadd.f64 v13, v14
  v28 = fadd.f64 v15, v16
  v29 = fadd.f64 v17, v18
  v30 = fadd.f64 v19, v20

  v31 = fadd.f64 v21, v22
  v32 = fadd.f64 v23, v24
  v33 = fadd.f64 v25, v26
  v34 = fadd.f64 v27, v28
  v35 = fadd.f64 v29, v30

  v36 = fadd.f64 v31, v32
  v37 = fadd.f64 v33, v34

  v38 = fadd.f64 v36, v37

  v39 = fadd.f64 v38, v35

  return v39
}

; VCode:
;   push rbp
;   unwind PushFrameRegs { offset_upward_to_caller_sp: 16 }
;   mov rbp, rsp
;   unwind DefineNewFrame { offset_upward_to_caller_sp: 16, offset_downward_to_clobbers: 160 }
;   sub rsp, rsp, $224
;   movdqu xmmword ptr [rsp + 0x40], xmm6
;   unwind SaveReg { clobber_offset: 0, reg: p6f }
;   movdqu xmmword ptr [rsp + 0x50], xmm7
;   unwind SaveReg { clobber_offset: 16, reg: p7f }
;   movdqu xmmword ptr [rsp + 0x60], xmm8
;   unwind SaveReg { clobber_offset: 32, reg: p8f }
;   movdqu xmmword ptr [rsp + 0x70], xmm9
;   unwind SaveReg { clobber_offset: 48, reg: p9f }
;   movdqu xmmword ptr [rsp + 0x80], xmm10
;   unwind SaveReg { clobber_offset: 64, reg: p10f }
;   movdqu xmmword ptr [rsp + 0x90], xmm11
;   unwind SaveReg { clobber_offset: 80, reg: p11f }
;   movdqu xmmword ptr [rsp + 0xa0], xmm12
;   unwind SaveReg { clobber_offset: 96, reg: p12f }
;   movdqu xmmword ptr [rsp + 0xb0], xmm13
;   unwind SaveReg { clobber_offset: 112, reg: p13f }
;   movdqu xmmword ptr [rsp + 0xc0], xmm14
;   unwind SaveReg { clobber_offset: 128, reg: p14f }
;   movdqu xmmword ptr [rsp + 0xd0], xmm15
;   unwind SaveReg { clobber_offset: 144, reg: p15f }
; block0:
;   movsd xmm0, qword ptr [rcx + 0x0]
;   movsd xmm10, qword ptr [rcx + 0x8]
;   movdqu xmmword ptr [rsp + 0x30], xmm10
;   movsd xmm5, qword ptr [rcx + 0x10]
;   movsd xmm14, qword ptr [rcx + 0x18]
;   movdqu xmmword ptr [rsp + 0x20], xmm14
;   movsd xmm13, qword ptr [rcx + 0x20]
;   movsd xmm15, qword ptr [rcx + 0x28]
;   movdqu xmmword ptr [rsp + 0x10], xmm15
;   movsd xmm7, qword ptr [rcx + 0x30]
;   movsd xmm8, qword ptr [rcx + 0x38]
;   movdqu xmmword ptr [rsp], xmm8
;   movsd xmm12, qword ptr [rcx + 0x40]
;   movsd xmm2, qword ptr [rcx + 0x48]
;   movsd xmm9, qword ptr [rcx + 0x50]
;   movsd xmm4, qword ptr [rcx + 0x58]
;   movsd xmm3, qword ptr [rcx + 0x60]
;   movsd xmm8, qword ptr [rcx + 0x68]
;   movsd xmm11, qword ptr [rcx + 0x70]
;   movsd xmm10, qword ptr [rcx + 0x78]
;   movsd xmm6, qword ptr [rcx + 0x80]
;   movsd xmm14, qword ptr [rcx + 0x88]
;   movsd xmm1, qword ptr [rcx + 0x90]
;   movdqu xmm15, xmmword ptr [rsp + 0x30]
;   addsd xmm0, xmm0, xmm15
;   movdqu xmm15, xmmword ptr [rsp + 0x20]
;   addsd xmm5, xmm5, xmm15
;   movdqu xmm15, xmmword ptr [rsp + 0x10]
;   addsd xmm13, xmm13, xmm15
;   movdqu xmm15, xmmword ptr [rsp]
;   addsd xmm7, xmm7, xmm15
;   addsd xmm12, xmm12, xmm2
;   addsd xmm9, xmm9, xmm4
;   addsd xmm3, xmm3, xmm8
;   addsd xmm11, xmm11, xmm10
;   addsd xmm6, xmm6, xmm14
;   addsd xmm1, xmm1, xmmword ptr [rcx + 0x98]
;   addsd xmm0, xmm0, xmm5
;   addsd xmm13, xmm13, xmm7
;   addsd xmm12, xmm12, xmm9
;   addsd xmm3, xmm3, xmm11
;   addsd xmm6, xmm6, xmm1
;   addsd xmm0, xmm0, xmm13
;   addsd xmm12, xmm12, xmm3
;   addsd xmm0, xmm0, xmm12
;   addsd xmm0, xmm0, xmm6
;   movdqu xmm6, xmmword ptr [rsp + 0x40]
;   movdqu xmm7, xmmword ptr [rsp + 0x50]
;   movdqu xmm8, xmmword ptr [rsp + 0x60]
;   movdqu xmm9, xmmword ptr [rsp + 0x70]
;   movdqu xmm10, xmmword ptr [rsp + 0x80]
;   movdqu xmm11, xmmword ptr [rsp + 0x90]
;   movdqu xmm12, xmmword ptr [rsp + 0xa0]
;   movdqu xmm13, xmmword ptr [rsp + 0xb0]
;   movdqu xmm14, xmmword ptr [rsp + 0xc0]
;   movdqu xmm15, xmmword ptr [rsp + 0xd0]
;   add rsp, rsp, $224
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
;   sub rsp, 0xe0
;   movdqu xmmword ptr [rsp + 0x40], xmm6
;   movdqu xmmword ptr [rsp + 0x50], xmm7
;   movdqu xmmword ptr [rsp + 0x60], xmm8
;   movdqu xmmword ptr [rsp + 0x70], xmm9
;   movdqu xmmword ptr [rsp + 0x80], xmm10
;   movdqu xmmword ptr [rsp + 0x90], xmm11
;   movdqu xmmword ptr [rsp + 0xa0], xmm12
;   movdqu xmmword ptr [rsp + 0xb0], xmm13
;   movdqu xmmword ptr [rsp + 0xc0], xmm14
;   movdqu xmmword ptr [rsp + 0xd0], xmm15
; block1: ; offset 0x61
;   movsd xmm0, qword ptr [rcx] ; trap: heap_oob
;   movsd xmm10, qword ptr [rcx + 8] ; trap: heap_oob
;   movdqu xmmword ptr [rsp + 0x30], xmm10
;   movsd xmm5, qword ptr [rcx + 0x10] ; trap: heap_oob
;   movsd xmm14, qword ptr [rcx + 0x18] ; trap: heap_oob
;   movdqu xmmword ptr [rsp + 0x20], xmm14
;   movsd xmm13, qword ptr [rcx + 0x20] ; trap: heap_oob
;   movsd xmm15, qword ptr [rcx + 0x28] ; trap: heap_oob
;   movdqu xmmword ptr [rsp + 0x10], xmm15
;   movsd xmm7, qword ptr [rcx + 0x30] ; trap: heap_oob
;   movsd xmm8, qword ptr [rcx + 0x38] ; trap: heap_oob
;   movdqu xmmword ptr [rsp], xmm8
;   movsd xmm12, qword ptr [rcx + 0x40] ; trap: heap_oob
;   movsd xmm2, qword ptr [rcx + 0x48] ; trap: heap_oob
;   movsd xmm9, qword ptr [rcx + 0x50] ; trap: heap_oob
;   movsd xmm4, qword ptr [rcx + 0x58] ; trap: heap_oob
;   movsd xmm3, qword ptr [rcx + 0x60] ; trap: heap_oob
;   movsd xmm8, qword ptr [rcx + 0x68] ; trap: heap_oob
;   movsd xmm11, qword ptr [rcx + 0x70] ; trap: heap_oob
;   movsd xmm10, qword ptr [rcx + 0x78] ; trap: heap_oob
;   movsd xmm6, qword ptr [rcx + 0x80] ; trap: heap_oob
;   movsd xmm14, qword ptr [rcx + 0x88] ; trap: heap_oob
;   movsd xmm1, qword ptr [rcx + 0x90] ; trap: heap_oob
;   movdqu xmm15, xmmword ptr [rsp + 0x30]
;   addsd xmm0, xmm15
;   movdqu xmm15, xmmword ptr [rsp + 0x20]
;   addsd xmm5, xmm15
;   movdqu xmm15, xmmword ptr [rsp + 0x10]
;   addsd xmm13, xmm15
;   movdqu xmm15, xmmword ptr [rsp]
;   addsd xmm7, xmm15
;   addsd xmm12, xmm2
;   addsd xmm9, xmm4
;   addsd xmm3, xmm8
;   addsd xmm11, xmm10
;   addsd xmm6, xmm14
;   addsd xmm1, qword ptr [rcx + 0x98] ; trap: heap_oob
;   addsd xmm0, xmm5
;   addsd xmm13, xmm7
;   addsd xmm12, xmm9
;   addsd xmm3, xmm11
;   addsd xmm6, xmm1
;   addsd xmm0, xmm13
;   addsd xmm12, xmm3
;   addsd xmm0, xmm12
;   addsd xmm0, xmm6
;   movdqu xmm6, xmmword ptr [rsp + 0x40]
;   movdqu xmm7, xmmword ptr [rsp + 0x50]
;   movdqu xmm8, xmmword ptr [rsp + 0x60]
;   movdqu xmm9, xmmword ptr [rsp + 0x70]
;   movdqu xmm10, xmmword ptr [rsp + 0x80]
;   movdqu xmm11, xmmword ptr [rsp + 0x90]
;   movdqu xmm12, xmmword ptr [rsp + 0xa0]
;   movdqu xmm13, xmmword ptr [rsp + 0xb0]
;   movdqu xmm14, xmmword ptr [rsp + 0xc0]
;   movdqu xmm15, xmmword ptr [rsp + 0xd0]
;   add rsp, 0xe0
;   mov rsp, rbp
;   pop rbp
;   ret

