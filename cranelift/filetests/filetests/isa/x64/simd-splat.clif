test compile precise-output
set enable_simd
target x86_64

function %splat_i8(i8) -> i8x16 {
block0(v0: i8):
  v1 = splat.i8x16 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movd xmm0, edi
;   uninit xmm5
;   pxor xmm5, xmm5, xmm5
;   pshufb xmm0, xmm0, xmm5
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movd xmm0, edi
;   pxor xmm5, xmm5
;   pshufb xmm0, xmm5
;   mov rsp, rbp
;   pop rbp
;   ret

function %splat_i16(i16) -> i16x8 {
block0(v0: i16):
  v1 = splat.i16x8 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movd xmm2, edi
;   pshuflw xmm4, xmm2, 0
;   pshufd xmm0, xmm4, 0
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movd xmm2, edi
;   pshuflw xmm4, xmm2, 0
;   pshufd xmm0, xmm4, 0
;   mov rsp, rbp
;   pop rbp
;   ret

function %splat_i32(i32) -> i32x4 {
block0(v0: i32):
  v1 = splat.i32x4 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movd xmm2, edi
;   pshufd xmm0, xmm2, 0
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movd xmm2, edi
;   pshufd xmm0, xmm2, 0
;   mov rsp, rbp
;   pop rbp
;   ret

function %splat_i64(i64) -> i64x2 {
block0(v0: i64):
  v1 = splat.i64x2 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movq xmm2, rdi
;   movddup xmm0, xmm2
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movq xmm2, rdi
;   movddup xmm0, xmm2
;   mov rsp, rbp
;   pop rbp
;   ret

function %splat_f32(f32) -> f32x4 {
block0(v0: f32):
  v1 = splat.f32x4 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   shufps xmm0, xmm0, xmm0, 0x0
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   shufps xmm0, xmm0, 0
;   mov rsp, rbp
;   pop rbp
;   ret

function %splat_f64(f64) -> f64x2 {
block0(v0: f64):
  v1 = splat.f64x2 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movddup xmm0, xmm0
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movddup xmm0, xmm0
;   mov rsp, rbp
;   pop rbp
;   ret

function %load_splat_i8(i64) -> i8x16 {
block0(v0: i64):
  v1 = load.i8 v0
  v2 = splat.i8x16 v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   uninit xmm0
;   pinsrb xmm0, xmm0, qword ptr [rdi + 0x0], 0x0
;   uninit xmm7
;   pxor xmm7, xmm7, xmm7
;   pshufb xmm0, xmm0, xmm7
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   pinsrb xmm0, byte ptr [rdi], 0 ; trap: heap_oob
;   pxor xmm7, xmm7
;   pshufb xmm0, xmm7
;   mov rsp, rbp
;   pop rbp
;   ret

function %load_splat_i16(i64) -> i16x8 {
block0(v0: i64):
  v1 = load.i16 v0
  v2 = splat.i16x8 v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   uninit xmm3
;   pinsrw xmm3, xmm3, qword ptr [rdi + 0x0], 0x0
;   pshuflw xmm6, xmm3, 0
;   pshufd xmm0, xmm6, 0
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   pinsrw xmm3, word ptr [rdi], 0 ; trap: heap_oob
;   pshuflw xmm6, xmm3, 0
;   pshufd xmm0, xmm6, 0
;   mov rsp, rbp
;   pop rbp
;   ret

function %load_splat_i32(i64) -> i32x4 {
block0(v0: i64):
  v1 = load.i32 v0
  v2 = splat.i32x4 v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movss xmm0, qword ptr [rdi + 0x0]
;   shufps xmm0, xmm0, xmm0, 0x0
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movss xmm0, dword ptr [rdi] ; trap: heap_oob
;   shufps xmm0, xmm0, 0
;   mov rsp, rbp
;   pop rbp
;   ret

function %load_splat_i64(i64) -> i64x2 {
block0(v0: i64):
  v1 = load.i64 v0
  v2 = splat.i64x2 v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movddup xmm0, qword ptr [rdi + 0x0]
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movddup xmm0, qword ptr [rdi] ; trap: heap_oob
;   mov rsp, rbp
;   pop rbp
;   ret

function %load_splat_f32(i64) -> f32x4 {
block0(v0: i64):
  v1 = load.f32 v0
  v2 = splat.f32x4 v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movss xmm0, qword ptr [rdi + 0x0]
;   shufps xmm0, xmm0, xmm0, 0x0
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movss xmm0, dword ptr [rdi] ; trap: heap_oob
;   shufps xmm0, xmm0, 0
;   mov rsp, rbp
;   pop rbp
;   ret

function %load_splat_f64(i64) -> f64x2 {
block0(v0: i64):
  v1 = load.f64 v0
  v2 = splat.f64x2 v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movddup xmm0, qword ptr [rdi + 0x0]
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movddup xmm0, qword ptr [rdi] ; trap: heap_oob
;   mov rsp, rbp
;   pop rbp
;   ret

