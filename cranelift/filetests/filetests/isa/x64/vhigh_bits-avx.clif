test compile precise-output
set enable_simd
target x86_64 has_avx

function %f1(i8x16) -> i8 {
block0(v0: i8x16):
  v1 = vhigh_bits.i8 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpmovmskb eax, xmm0
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpmovmskb eax, xmm0
;   mov rsp, rbp
;   pop rbp
;   ret

function %f3(i16x8) -> i8 {
block0(v0: i16x8):
  v1 = vhigh_bits.i8 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpacksswb xmm2, xmm0, xmm0
;   vpmovmskb eax, xmm2
;   shr rax, rax, 0x8
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpacksswb xmm2, xmm0, xmm0
;   vpmovmskb eax, xmm2
;   shr rax, 8
;   mov rsp, rbp
;   pop rbp
;   ret

function %f4(i32x4) -> i8 {
block0(v0: i32x4):
  v1 = vhigh_bits.i8 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vmovmskps eax, xmm0
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vmovmskps eax, xmm0
;   mov rsp, rbp
;   pop rbp
;   ret

function %f5(i64x2) -> i8 {
block0(v0: i64x2):
  v1 = vhigh_bits.i8 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vmovmskpd eax, xmm0
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vmovmskpd eax, xmm0
;   mov rsp, rbp
;   pop rbp
;   ret

