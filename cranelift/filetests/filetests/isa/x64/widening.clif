test compile precise-output
target x86_64

function %f1(i8x16) -> i16x8 {
block0(v0: i8x16):
  v1 = swiden_low v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   pmovsxbw xmm0, xmm0
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   pmovsxbw xmm0, xmm0
;   mov rsp, rbp
;   pop rbp
;   ret

function %f2(i16x8) -> i32x4 {
block0(v0: i16x8):
  v1 = swiden_low v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   pmovsxwd xmm0, xmm0
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   pmovsxwd xmm0, xmm0
;   mov rsp, rbp
;   pop rbp
;   ret

function %f3(i32x4) -> i64x2 {
block0(v0: i32x4):
  v1 = swiden_low v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   pmovsxdq xmm0, xmm0
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   pmovsxdq xmm0, xmm0
;   mov rsp, rbp
;   pop rbp
;   ret

function %f4(i8x16) -> i16x8 {
block0(v0: i8x16):
  v1 = swiden_high v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movdqa xmm2, xmm0
;   palignr xmm2, xmm2, xmm0, 0x8
;   pmovsxbw xmm0, xmm2
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movdqa xmm2, xmm0
;   palignr xmm2, xmm0, 8
;   pmovsxbw xmm0, xmm2
;   mov rsp, rbp
;   pop rbp
;   ret

function %f5(i16x8) -> i32x4 {
block0(v0: i16x8):
  v1 = swiden_high v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movdqa xmm2, xmm0
;   palignr xmm2, xmm2, xmm0, 0x8
;   pmovsxwd xmm0, xmm2
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movdqa xmm2, xmm0
;   palignr xmm2, xmm0, 8
;   pmovsxwd xmm0, xmm2
;   mov rsp, rbp
;   pop rbp
;   ret

function %f6(i32x4) -> i64x2 {
block0(v0: i32x4):
  v1 = swiden_high v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   pshufd xmm2, xmm0, 238
;   pmovsxdq xmm0, xmm2
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   pshufd xmm2, xmm0, 0xee
;   pmovsxdq xmm0, xmm2
;   mov rsp, rbp
;   pop rbp
;   ret

function %f7(i8x16) -> i16x8 {
block0(v0: i8x16):
  v1 = uwiden_low v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   pmovzxbw xmm0, xmm0
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   pmovzxbw xmm0, xmm0
;   mov rsp, rbp
;   pop rbp
;   ret

function %f8(i16x8) -> i32x4 {
block0(v0: i16x8):
  v1 = uwiden_low v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   pmovzxwd xmm0, xmm0
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   pmovzxwd xmm0, xmm0
;   mov rsp, rbp
;   pop rbp
;   ret

function %f9(i32x4) -> i64x2 {
block0(v0: i32x4):
  v1 = uwiden_low v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   pmovzxdq xmm0, xmm0
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   pmovzxdq xmm0, xmm0
;   mov rsp, rbp
;   pop rbp
;   ret

function %f10(i8x16) -> i16x8 {
block0(v0: i8x16):
  v1 = uwiden_high v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   uninit xmm3
;   pxor xmm3, xmm3, xmm3
;   punpckhbw xmm0, xmm0, xmm3
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   pxor xmm3, xmm3
;   punpckhbw xmm0, xmm3
;   mov rsp, rbp
;   pop rbp
;   ret

function %f11(i16x8) -> i32x4 {
block0(v0: i16x8):
  v1 = uwiden_high v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   uninit xmm3
;   pxor xmm3, xmm3, xmm3
;   punpckhwd xmm0, xmm0, xmm3
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   pxor xmm3, xmm3
;   punpckhwd xmm0, xmm3
;   mov rsp, rbp
;   pop rbp
;   ret

function %f12(i32x4) -> i64x2 {
block0(v0: i32x4):
  v1 = uwiden_high v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   uninit xmm3
;   xorps xmm3, xmm3, xmm3
;   unpckhps xmm0, xmm0, xmm3
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   xorps xmm3, xmm3
;   unpckhps xmm0, xmm3
;   mov rsp, rbp
;   pop rbp
;   ret

