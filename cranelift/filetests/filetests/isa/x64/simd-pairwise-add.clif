test compile precise-output
target x86_64

function %fn1(i8x16) -> i16x8 {
block0(v0: i8x16):
  v1 = swiden_low v0
  v2 = swiden_high v0
  v3 = iadd_pairwise v1, v2
  return v3
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movdqa xmm4, xmm0
;   movdqu xmm0, const(0)
;   movdqa xmm5, xmm4
;   pmaddubsw xmm0, xmm0, xmm5
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movdqa xmm4, xmm0
;   movdqu xmm0, xmmword ptr [rip + 0x10]
;   movdqa xmm5, xmm4
;   pmaddubsw xmm0, xmm5
;   mov rsp, rbp
;   pop rbp
;   ret
;   add byte ptr [rax], al
;   add dword ptr [rcx], eax
;   add dword ptr [rcx], eax
;   add dword ptr [rcx], eax
;   add dword ptr [rcx], eax
;   add dword ptr [rcx], eax
;   add dword ptr [rcx], eax
;   add dword ptr [rcx], eax
;   add dword ptr [rcx], eax

function %fn2(i16x8) -> i32x4 {
block0(v0: i16x8):
  v1 = swiden_low v0
  v2 = swiden_high v0
  v3 = iadd_pairwise v1, v2
  return v3
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   pmaddwd xmm0, xmm0, const(0)
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   pmaddwd xmm0, xmmword ptr [rip + 0x14]
;   mov rsp, rbp
;   pop rbp
;   ret
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rcx], al
;   add byte ptr [rcx], al
;   add byte ptr [rcx], al
;   add byte ptr [rcx], al
;   add byte ptr [rcx], al
;   add byte ptr [rcx], al
;   add byte ptr [rcx], al
;   add byte ptr [rcx], al

function %fn3(i8x16) -> i16x8 {
block0(v0: i8x16):
  v1 = uwiden_low v0
  v2 = uwiden_high v0
  v3 = iadd_pairwise v1, v2
  return v3
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   pmaddubsw xmm0, xmm0, const(0)
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   pmaddubsw xmm0, xmmword ptr [rip + 0x13]
;   mov rsp, rbp
;   pop rbp
;   ret
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add dword ptr [rcx], eax
;   add dword ptr [rcx], eax
;   add dword ptr [rcx], eax
;   add dword ptr [rcx], eax
;   add dword ptr [rcx], eax
;   add dword ptr [rcx], eax
;   add dword ptr [rcx], eax
;   add dword ptr [rcx], eax

function %fn4(i16x8) -> i32x4 {
block0(v0: i16x8):
  v1 = uwiden_low v0
  v2 = uwiden_high v0
  v3 = iadd_pairwise v1, v2
  return v3
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   pxor xmm0, xmm0, const(0)
;   pmaddwd xmm0, xmm0, const(1)
;   paddd xmm0, xmm0, const(2)
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   pxor xmm0, xmmword ptr [rip + 0x24]
;   pmaddwd xmm0, xmmword ptr [rip + 0x2c]
;   paddd xmm0, xmmword ptr [rip + 0x34]
;   mov rsp, rbp
;   pop rbp
;   ret
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], 0x80
;   add byte ptr [rax - 0x7fff8000], al
;   add byte ptr [rax - 0x7fff8000], al
;   add dword ptr [rax], eax
;   add dword ptr [rax], eax
;   add dword ptr [rax], eax
;   add dword ptr [rax], eax
;   add dword ptr [rax], eax
;   add dword ptr [rax], eax
;   add dword ptr [rax], eax
;   add dword ptr [rax], eax
;   add byte ptr [rax], al
;   add dword ptr [rax], eax
;   add byte ptr [rax], al
;   add dword ptr [rax], eax
;   add byte ptr [rax], al
;   add dword ptr [rax], eax
;   add byte ptr [rax], al
;   add dword ptr [rax], eax

