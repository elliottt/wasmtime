test compile precise-output
set opt_level=speed
target x86_64


function %i32_shl_sshr_8_to_ireduce(i32) -> i32 {
block0(v0: i32):
    v1 = ishl_imm v0, 24
    v2 = sshr_imm v1, 24
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movsx eax, dil
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movsx eax, dil
;   mov rsp, rbp
;   pop rbp
;   ret

function %i32_shl_sshr_16_to_ireduce(i32) -> i32 {
block0(v0: i32):
    v1 = ishl_imm v0, 16
    v2 = sshr_imm v1, 16
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movsx eax, di
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movsx eax, di
;   mov rsp, rbp
;   pop rbp
;   ret

function %i64_shl_sshr_8_to_ireduce(i64) -> i64 {
block0(v0: i64):
    v1 = ishl_imm v0, 56
    v2 = sshr_imm v1, 56
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movsx rax, dil
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movsx rax, dil
;   mov rsp, rbp
;   pop rbp
;   ret

function %i64_shl_sshr_16_to_ireduce(i64) -> i64 {
block0(v0: i64):
    v1 = ishl_imm v0, 48
    v2 = sshr_imm v1, 48
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movsx rax, di
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movsx rax, di
;   mov rsp, rbp
;   pop rbp
;   ret

function %i64_shl_sshr_32_to_ireduce(i64) -> i64 {
block0(v0: i64):
    v1 = ishl_imm v0, 32
    v2 = sshr_imm v1, 32
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movsx rax, edi
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movsxd rax, edi
;   mov rsp, rbp
;   pop rbp
;   ret

function %i32_shl_ushr_8_to_ireduce(i32) -> i32 {
block0(v0: i32):
    v1 = ishl_imm v0, 24
    v2 = ushr_imm v1, 24
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movzx eax, dil
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movzx eax, dil
;   mov rsp, rbp
;   pop rbp
;   ret

function %i32_shl_ushr_16_to_ireduce(i32) -> i32 {
block0(v0: i32):
    v1 = ishl_imm v0, 16
    v2 = ushr_imm v1, 16
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movzx eax, di
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movzx eax, di
;   mov rsp, rbp
;   pop rbp
;   ret

function %i64_shl_ushr_8_to_ireduce(i64) -> i64 {
block0(v0: i64):
    v1 = ishl_imm v0, 56
    v2 = ushr_imm v1, 56
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movzx rax, dil
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movzx rax, dil
;   mov rsp, rbp
;   pop rbp
;   ret

function %i64_shl_ushr_16_to_ireduce(i64) -> i64 {
block0(v0: i64):
    v1 = ishl_imm v0, 48
    v2 = ushr_imm v1, 48
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movzx rax, di
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movzx rax, di
;   mov rsp, rbp
;   pop rbp
;   ret

function %i64_shl_ushr_32_to_ireduce(i64) -> i64 {
block0(v0: i64):
    v1 = ishl_imm v0, 32
    v2 = ushr_imm v1, 32
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov eax, edi
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov eax, edi
;   mov rsp, rbp
;   pop rbp
;   ret

