test compile precise-output
target x86_64

function %f1(i8) -> i8 {
block0(v0: i8):
    v1 = iabs.i8 v0
    return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   neg al, al
;   cmovs eax, edi, eax
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   neg al
;   cmovs eax, edi
;   mov rsp, rbp
;   pop rbp
;   ret

function %f2(i16) -> i16 {
block0(v0: i16):
    v1 = iabs.i16 v0
    return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   neg ax, ax
;   cmovs eax, edi, eax
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   neg ax
;   cmovs eax, edi
;   mov rsp, rbp
;   pop rbp
;   ret

function %f3(i32) -> i32 {
block0(v0: i32):
    v1 = iabs.i32 v0
    return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   neg eax, eax
;   cmovs eax, edi, eax
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   neg eax
;   cmovs eax, edi
;   mov rsp, rbp
;   pop rbp
;   ret

function %f3(i64) -> i64 {
block0(v0: i64):
    v1 = iabs.i64 v0
    return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   neg rax, rax
;   cmovs rax, rdi, rax
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   neg rax
;   cmovs rax, rdi
;   mov rsp, rbp
;   pop rbp
;   ret

