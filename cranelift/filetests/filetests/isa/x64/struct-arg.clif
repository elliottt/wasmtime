test compile precise-output
target x86_64

function u0:0(i64 sarg(64)) -> i8 system_v {
block0(v0: i64):
    v1 = load.i8 v0
    return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   lea rsi, qword ptr [rbp + 0x10]
;   movzx rax, byte ptr [rsi + 0x0]
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   lea rsi, [rbp + 0x10]
;   movzx rax, byte ptr [rsi] ; trap: heap_oob
;   mov rsp, rbp
;   pop rbp
;   ret

function u0:1(i64 sarg(64), i64) -> i8 system_v {
block0(v0: i64, v1: i64):
    v2 = load.i8 v1
	v3 = load.i8 v0
	v4 = iadd.i8 v2, v3
    return v4
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   lea rcx, qword ptr [rbp + 0x10]
;   movzx rax, byte ptr [rdi + 0x0]
;   movzx r9, byte ptr [rcx + 0x0]
;   add eax, eax, r9d
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   lea rcx, [rbp + 0x10]
;   movzx rax, byte ptr [rdi] ; trap: heap_oob
;   movzx r9, byte ptr [rcx] ; trap: heap_oob
;   add eax, r9d
;   mov rsp, rbp
;   pop rbp
;   ret

function u0:2(i64) -> i8 system_v {
fn1 = colocated u0:0(i64 sarg(64)) -> i8 system_v

block0(v0: i64):
    v1 = call fn1(v0)
    return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rsi, rdi
;   sub rsp, rsp, $64
;   virtual_sp_offset_adjust 64
;   lea rdi, qword ptr [rsp + 0x0]
;   mov edx, 0x40
;   load_ext_name r11, %Memcpy+0
;   call *r11
;   call User(userextname0)
;   add rsp, rsp, $64
;   virtual_sp_offset_adjust -64
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rsi, rdi
;   sub rsp, 0x40
;   lea rdi, [rsp]
;   mov edx, 0x40
;   movabs r11, 0 ; reloc_external Abs8 %Memcpy 0
;   call r11
;   call 0x26 ; reloc_external CallPCRel4 u0:0 -4
;   add rsp, 0x40
;   mov rsp, rbp
;   pop rbp
;   ret

function u0:3(i64, i64) -> i8 system_v {
fn1 = colocated u0:0(i64, i64 sarg(64)) -> i8 system_v

block0(v0: i64, v1: i64):
    v2 = call fn1(v0, v1)
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
;   sub rsp, rsp, $16
;   mov qword ptr [rsp + 0x0], r13
; block0:
;   mov r13, rdi
;   sub rsp, rsp, $64
;   virtual_sp_offset_adjust 64
;   lea rdi, qword ptr [rsp + 0x0]
;   mov edx, 0x40
;   load_ext_name rax, %Memcpy+0
;   call *rax
;   mov rdi, r13
;   call User(userextname0)
;   add rsp, rsp, $64
;   virtual_sp_offset_adjust -64
;   mov r13, qword ptr [rsp + 0x0]
;   add rsp, rsp, $16
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
;   sub rsp, 0x10
;   mov qword ptr [rsp], r13
; block1: ; offset 0xc
;   mov r13, rdi
;   sub rsp, 0x40
;   lea rdi, [rsp]
;   mov edx, 0x40
;   movabs rax, 0 ; reloc_external Abs8 %Memcpy 0
;   call rax
;   mov rdi, r13
;   call 0x30 ; reloc_external CallPCRel4 u0:0 -4
;   add rsp, 0x40
;   mov r13, qword ptr [rsp]
;   add rsp, 0x10
;   mov rsp, rbp
;   pop rbp
;   ret

function u0:4(i64 sarg(128), i64 sarg(64)) -> i8 system_v {
block0(v0: i64, v1: i64):
    v2 = load.i8 v0
    v3 = load.i8 v1
    v4 = iadd.i8 v2, v3
    return v4
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   lea rsi, qword ptr [rbp + 0x10]
;   lea rcx, qword ptr [rbp + 0x90]
;   movzx rax, byte ptr [rsi + 0x0]
;   movzx r9, byte ptr [rcx + 0x0]
;   add eax, eax, r9d
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   lea rsi, [rbp + 0x10]
;   lea rcx, [rbp + 0x90]
;   movzx rax, byte ptr [rsi] ; trap: heap_oob
;   movzx r9, byte ptr [rcx] ; trap: heap_oob
;   add eax, r9d
;   mov rsp, rbp
;   pop rbp
;   ret

function u0:5(i64, i64, i64) -> i8 system_v {
fn1 = colocated u0:0(i64, i64 sarg(128), i64 sarg(64)) -> i8 system_v

block0(v0: i64, v1: i64, v2: i64):
    v3 = call fn1(v0, v1, v2)
    return v3
}

; VCode:
;   push rbp
;   mov rbp, rsp
;   sub rsp, rsp, $16
;   mov qword ptr [rsp + 0x0], r12
;   mov qword ptr [rsp + 0x8], r14
; block0:
;   mov r14, rdx
;   mov r12, rdi
;   sub rsp, rsp, $192
;   virtual_sp_offset_adjust 192
;   lea rdi, qword ptr [rsp + 0x0]
;   mov edx, 0x80
;   load_ext_name rax, %Memcpy+0
;   call *rax
;   lea rdi, qword ptr [rsp + 0x80]
;   mov edx, 0x40
;   load_ext_name r11, %Memcpy+0
;   mov rsi, r14
;   call *r11
;   mov rdi, r12
;   call User(userextname0)
;   add rsp, rsp, $192
;   virtual_sp_offset_adjust -192
;   mov r12, qword ptr [rsp + 0x0]
;   mov r14, qword ptr [rsp + 0x8]
;   add rsp, rsp, $16
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
;   sub rsp, 0x10
;   mov qword ptr [rsp], r12
;   mov qword ptr [rsp + 8], r14
; block1: ; offset 0x11
;   mov r14, rdx
;   mov r12, rdi
;   sub rsp, 0xc0
;   lea rdi, [rsp]
;   mov edx, 0x80
;   movabs rax, 0 ; reloc_external Abs8 %Memcpy 0
;   call rax
;   lea rdi, [rsp + 0x80]
;   mov edx, 0x40
;   movabs r11, 0 ; reloc_external Abs8 %Memcpy 0
;   mov rsi, r14
;   call r11
;   mov rdi, r12
;   call 0x58 ; reloc_external CallPCRel4 u0:0 -4
;   add rsp, 0xc0
;   mov r12, qword ptr [rsp]
;   mov r14, qword ptr [rsp + 8]
;   add rsp, 0x10
;   mov rsp, rbp
;   pop rbp
;   ret

