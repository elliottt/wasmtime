test compile precise-output
set enable_simd
target x86_64 has_avx

function %insertlane_f64x2_zero(f64x2, f64) -> f64x2 {
block0(v0: f64x2, v1: f64):
  v2 = insertlane v0, v1, 0
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vmovsd xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vmovsd xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret

function %insertlane_f64x2_one(f64x2, f64) -> f64x2 {
block0(v0: f64x2, v1: f64):
  v2 = insertlane v0, v1, 1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vmovlhps xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vmovlhps xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret

function %insertlane_f64x2_zero_with_load(f64x2, i64) -> f64x2 {
block0(v0: f64x2, v1: i64):
  v2 = load.f64 v1
  v3 = insertlane v0, v2, 0
  return v3
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vmovsd xmm3, xmmword ptr [rdi + 0x0]
;   vmovsd xmm0, xmm0, xmm3
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vmovsd xmm3, qword ptr [rdi] ; trap: heap_oob
;   vmovsd xmm0, xmm0, xmm3
;   mov rsp, rbp
;   pop rbp
;   ret

function %insertlane_i8x16_one_load(i8x16, i64) -> i8x16 {
block0(v0: i8x16, v1: i64):
  v2 = load.i8 v1
  v3 = insertlane v0, v2, 1
  return v3
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movzx rdx, byte ptr [rdi + 0x0]
;   vpinsrb xmm0, xmm0, rdx, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movzx rdx, byte ptr [rdi] ; trap: heap_oob
;   vpinsrb xmm0, xmm0, edx, 1
;   mov rsp, rbp
;   pop rbp
;   ret

function %insertlane_i16x8_one_load(i16x8, i64) -> i16x8 {
block0(v0: i16x8, v1: i64):
  v2 = load.i16 v1
  v3 = insertlane v0, v2, 1
  return v3
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movzx rdx, word ptr [rdi + 0x0]
;   vpinsrw xmm0, xmm0, rdx, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movzx rdx, word ptr [rdi] ; trap: heap_oob
;   vpinsrw xmm0, xmm0, edx, 1
;   mov rsp, rbp
;   pop rbp
;   ret

function %insertlane_i32x4_one_load(i32x4, i64) -> i32x4 {
block0(v0: i32x4, v1: i64):
  v2 = load.i32 v1
  v3 = insertlane v0, v2, 1
  return v3
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpinsrd xmm0, xmm0, qword ptr [rdi + 0x0], 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpinsrd xmm0, xmm0, dword ptr [rdi], 1 ; trap: heap_oob
;   mov rsp, rbp
;   pop rbp
;   ret

function %insertlane_i64x2_one_load(i64x2, i64) -> i64x2 {
block0(v0: i64x2, v1: i64):
  v2 = load.i64 v1
  v3 = insertlane v0, v2, 1
  return v3
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpinsrq xmm0, xmm0, qword ptr [rdi + 0x0], 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpinsrq xmm0, xmm0, qword ptr [rdi], 1 ; trap: heap_oob
;   mov rsp, rbp
;   pop rbp
;   ret

