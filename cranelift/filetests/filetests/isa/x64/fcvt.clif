test compile precise-output
target x86_64

function %f1(i8) -> f32 {
block0(v0: i8):
  v1 = fcvt_from_sint.f32 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movsx eax, dil
;   cvtsi2ss xmm0, eax
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movsx eax, dil
;   cvtsi2ss xmm0, eax
;   mov rsp, rbp
;   pop rbp
;   ret

function %f2(i16) -> f32 {
block0(v0: i16):
  v1 = fcvt_from_sint.f32 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movsx eax, di
;   cvtsi2ss xmm0, eax
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movsx eax, di
;   cvtsi2ss xmm0, eax
;   mov rsp, rbp
;   pop rbp
;   ret

function %f3(i32) -> f32 {
block0(v0: i32):
  v1 = fcvt_from_sint.f32 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   cvtsi2ss xmm0, edi
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   cvtsi2ss xmm0, edi
;   mov rsp, rbp
;   pop rbp
;   ret

function %f4(i64) -> f32 {
block0(v0: i64):
  v1 = fcvt_from_sint.f32 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   cvtsi2ss xmm0, rdi
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   cvtsi2ss xmm0, rdi
;   mov rsp, rbp
;   pop rbp
;   ret

function %f5(i8) -> f64 {
block0(v0: i8):
  v1 = fcvt_from_sint.f64 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movsx eax, dil
;   cvtsi2sd xmm0, eax
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movsx eax, dil
;   cvtsi2sd xmm0, eax
;   mov rsp, rbp
;   pop rbp
;   ret

function %f6(i16) -> f64 {
block0(v0: i16):
  v1 = fcvt_from_sint.f64 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movsx eax, di
;   cvtsi2sd xmm0, eax
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movsx eax, di
;   cvtsi2sd xmm0, eax
;   mov rsp, rbp
;   pop rbp
;   ret

function %f7(i32) -> f64 {
block0(v0: i32):
  v1 = fcvt_from_sint.f64 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   cvtsi2sd xmm0, edi
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   cvtsi2sd xmm0, edi
;   mov rsp, rbp
;   pop rbp
;   ret

function %f8(i64) -> f64 {
block0(v0: i64):
  v1 = fcvt_from_sint.f64 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   cvtsi2sd xmm0, rdi
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   cvtsi2sd xmm0, rdi
;   mov rsp, rbp
;   pop rbp
;   ret

function %f9(i32x4) -> f64x2 {
block0(v0: i32x4):
  v1 = fcvt_low_from_sint.f64x2 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   cvtdq2pd xmm0, xmm0
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   cvtdq2pd xmm0, xmm0
;   mov rsp, rbp
;   pop rbp
;   ret

function %f10(i8, i16, i32, i64) -> f32 {
block0(v0: i8, v1: i16, v2: i32, v3: i64):
  v4 = fcvt_from_uint.f32 v0
  v5 = fcvt_from_uint.f32 v1
  v6 = fcvt_from_uint.f32 v2
  v7 = fcvt_from_uint.f32 v3
  v8 = fadd.f32 v4, v5
  v9 = fadd.f32 v8, v6
  v10 = fadd.f32 v9, v7
  return v10
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movzx r9, dil
;   cvtsi2ss xmm0, r9
;   movzx r9, si
;   cvtsi2ss xmm1, r9
;   mov r9d, edx
;   cvtsi2ss xmm2, r9
;   u64_to_f32_seq xmm14, rcx, r9, r10
;   addss xmm0, xmm0, xmm1
;   addss xmm0, xmm0, xmm2
;   addss xmm0, xmm0, xmm14
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movzx r9, dil
;   cvtsi2ss xmm0, r9
;   movzx r9, si
;   cvtsi2ss xmm1, r9
;   mov r9d, edx
;   cvtsi2ss xmm2, r9
;   cmp rcx, 0
;   jl 0x32
;   cvtsi2ss xmm14, rcx
;   jmp 0x4d
;   mov r9, rcx
;   shr r9, 1
;   mov r10, rcx
;   and r10, 1
;   or r10, r9
;   cvtsi2ss xmm14, r10
;   addss xmm14, xmm14
;   addss xmm0, xmm1
;   addss xmm0, xmm2
;   addss xmm0, xmm14
;   mov rsp, rbp
;   pop rbp
;   ret

function %f11(i32x4) -> f64x2 {
block0(v0: i32x4):
  v1 = uwiden_low v0
  v2 = fcvt_from_uint.f64x2 v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   unpcklps xmm0, xmm0, const(0)
;   subpd xmm0, xmm0, const(1)
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   unpcklps xmm0, xmmword ptr [rip + 0x15]
;   subpd xmm0, xmmword ptr [rip + 0x1d]
;   mov rsp, rbp
;   pop rbp
;   ret
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   xor byte ptr [rbx], al
;   add byte ptr [rax], dh
;   add byte ptr [r8], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   xor byte ptr [rbx], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], dh

function %f12(i32x4) -> f32x4 {
block0(v0: i32x4):
  v1 = fcvt_from_uint.f32x4 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movdqa xmm3, xmm0
;   pslld xmm3, xmm3, $16
;   psrld xmm3, xmm3, $16
;   movdqa xmm9, xmm0
;   psubd xmm9, xmm9, xmm3
;   cvtdq2ps xmm8, xmm3
;   psrld xmm9, xmm9, $1
;   cvtdq2ps xmm0, xmm9
;   addps xmm0, xmm0, xmm0
;   addps xmm0, xmm0, xmm8
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movdqa xmm3, xmm0
;   pslld xmm3, 0x10
;   psrld xmm3, 0x10
;   movdqa xmm9, xmm0
;   psubd xmm9, xmm3
;   cvtdq2ps xmm8, xmm3
;   psrld xmm9, 1
;   cvtdq2ps xmm0, xmm9
;   addps xmm0, xmm0
;   addps xmm0, xmm8
;   mov rsp, rbp
;   pop rbp
;   ret

function %f13(f32) -> i32 {
block0(v0: f32):
  v1 = fcvt_to_uint.i32 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   cvt_float32_to_uint32_seq eax, xmm0, r8, xmm3, xmm4
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov r8d, 0x4f000000
;   movd xmm3, r8d
;   ucomiss xmm0, xmm3
;   jae 0x2d
;   jp 0x4c
;   cvttss2si eax, xmm0
;   cmp eax, 0
;   jge 0x47
;   ud2 ; trap: int_ovf
;   movaps xmm4, xmm0
;   subss xmm4, xmm3
;   cvttss2si eax, xmm4
;   cmp eax, 0
;   jl 0x4e
;   add eax, 0x80000000
;   mov rsp, rbp
;   pop rbp
;   ret
;   ud2 ; trap: bad_toint
;   ud2 ; trap: int_ovf

function %f14(f32) -> i64 {
block0(v0: f32):
  v1 = fcvt_to_uint.i64 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   cvt_float32_to_uint64_seq rax, xmm0, r8, xmm3, xmm4
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov r8d, 0x5f000000
;   movd xmm3, r8d
;   ucomiss xmm0, xmm3
;   jae 0x2f
;   jp 0x57
;   cvttss2si rax, xmm0
;   cmp rax, 0
;   jge 0x52
;   ud2 ; trap: int_ovf
;   movaps xmm4, xmm0
;   subss xmm4, xmm3
;   cvttss2si rax, xmm4
;   cmp rax, 0
;   jl 0x59
;   movabs r8, 0x8000000000000000
;   add rax, r8
;   mov rsp, rbp
;   pop rbp
;   ret
;   ud2 ; trap: bad_toint
;   ud2 ; trap: int_ovf

function %f15(f64) -> i32 {
block0(v0: f64):
  v1 = fcvt_to_uint.i32 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   cvt_float64_to_uint32_seq eax, xmm0, r8, xmm3, xmm4
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movabs r8, 0x41e0000000000000
;   movq xmm3, r8
;   ucomisd xmm0, xmm3
;   jae 0x32
;   jp 0x51
;   cvttsd2si eax, xmm0
;   cmp eax, 0
;   jge 0x4c
;   ud2 ; trap: int_ovf
;   movaps xmm4, xmm0
;   subsd xmm4, xmm3
;   cvttsd2si eax, xmm4
;   cmp eax, 0
;   jl 0x53
;   add eax, 0x80000000
;   mov rsp, rbp
;   pop rbp
;   ret
;   ud2 ; trap: bad_toint
;   ud2 ; trap: int_ovf

function %f16(f64) -> i64 {
block0(v0: f64):
  v1 = fcvt_to_uint.i64 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   cvt_float64_to_uint64_seq rax, xmm0, r8, xmm3, xmm4
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movabs r8, 0x43e0000000000000
;   movq xmm3, r8
;   ucomisd xmm0, xmm3
;   jae 0x34
;   jp 0x5c
;   cvttsd2si rax, xmm0
;   cmp rax, 0
;   jge 0x57
;   ud2 ; trap: int_ovf
;   movaps xmm4, xmm0
;   subsd xmm4, xmm3
;   cvttsd2si rax, xmm4
;   cmp rax, 0
;   jl 0x5e
;   movabs r8, 0x8000000000000000
;   add rax, r8
;   mov rsp, rbp
;   pop rbp
;   ret
;   ud2 ; trap: bad_toint
;   ud2 ; trap: int_ovf

function %f17(f32) -> i32 {
block0(v0: f32):
  v1 = fcvt_to_uint_sat.i32 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   cvt_float32_to_uint32_sat_seq eax, xmm0, r8, xmm3, xmm4
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov r8d, 0x4f000000
;   movd xmm3, r8d
;   ucomiss xmm0, xmm3
;   jae 0x39
;   jnp 0x25
;   xor eax, eax
;   jmp 0x5d
;   cvttss2si eax, xmm0
;   cmp eax, 0
;   jge 0x5d
;   xor eax, eax
;   jmp 0x5d
;   movaps xmm4, xmm0
;   subss xmm4, xmm3
;   cvttss2si eax, xmm4
;   cmp eax, 0
;   jge 0x57
;   mov eax, 0xffffffff
;   jmp 0x5d
;   add eax, 0x80000000
;   mov rsp, rbp
;   pop rbp
;   ret

function %f18(f32) -> i64 {
block0(v0: f32):
  v1 = fcvt_to_uint_sat.i64 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   cvt_float32_to_uint64_sat_seq rax, xmm0, r8, xmm3, xmm4
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov r8d, 0x5f000000
;   movd xmm3, r8d
;   ucomiss xmm0, xmm3
;   jae 0x3d
;   jnp 0x26
;   xor rax, rax
;   jmp 0x6c
;   cvttss2si rax, xmm0
;   cmp rax, 0
;   jge 0x6c
;   xor rax, rax
;   jmp 0x6c
;   movaps xmm4, xmm0
;   subss xmm4, xmm3
;   cvttss2si rax, xmm4
;   cmp rax, 0
;   jge 0x5f
;   mov rax, 0xffffffffffffffff
;   jmp 0x6c
;   movabs r8, 0x8000000000000000
;   add rax, r8
;   mov rsp, rbp
;   pop rbp
;   ret

function %f19(f64) -> i32 {
block0(v0: f64):
  v1 = fcvt_to_uint_sat.i32 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   cvt_float64_to_uint32_sat_seq eax, xmm0, r8, xmm3, xmm4
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movabs r8, 0x41e0000000000000
;   movq xmm3, r8
;   ucomisd xmm0, xmm3
;   jae 0x3e
;   jnp 0x2a
;   xor eax, eax
;   jmp 0x62
;   cvttsd2si eax, xmm0
;   cmp eax, 0
;   jge 0x62
;   xor eax, eax
;   jmp 0x62
;   movaps xmm4, xmm0
;   subsd xmm4, xmm3
;   cvttsd2si eax, xmm4
;   cmp eax, 0
;   jge 0x5c
;   mov eax, 0xffffffff
;   jmp 0x62
;   add eax, 0x80000000
;   mov rsp, rbp
;   pop rbp
;   ret

function %f20(f64) -> i64 {
block0(v0: f64):
  v1 = fcvt_to_uint_sat.i64 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   cvt_float64_to_uint64_sat_seq rax, xmm0, r8, xmm3, xmm4
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movabs r8, 0x43e0000000000000
;   movq xmm3, r8
;   ucomisd xmm0, xmm3
;   jae 0x42
;   jnp 0x2b
;   xor rax, rax
;   jmp 0x71
;   cvttsd2si rax, xmm0
;   cmp rax, 0
;   jge 0x71
;   xor rax, rax
;   jmp 0x71
;   movaps xmm4, xmm0
;   subsd xmm4, xmm3
;   cvttsd2si rax, xmm4
;   cmp rax, 0
;   jge 0x64
;   mov rax, 0xffffffffffffffff
;   jmp 0x71
;   movabs r8, 0x8000000000000000
;   add rax, r8
;   mov rsp, rbp
;   pop rbp
;   ret

function %f21(f32) -> i32 {
block0(v0: f32):
  v1 = fcvt_to_sint.i32 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   cvt_float32_to_sint32_seq eax, xmm0, rdx, xmm3
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   cvttss2si eax, xmm0
;   cmp eax, 1
;   jno 0x39
;   ucomiss xmm0, xmm0
;   jp 0x3e
;   mov edx, 0xcf000000
;   movd xmm3, edx
;   ucomiss xmm0, xmm3
;   jb 0x40
;   xorpd xmm3, xmm3
;   ucomiss xmm3, xmm0
;   jb 0x42
;   mov rsp, rbp
;   pop rbp
;   ret
;   ud2 ; trap: bad_toint
;   ud2 ; trap: int_ovf
;   ud2 ; trap: int_ovf

function %f22(f32) -> i64 {
block0(v0: f32):
  v1 = fcvt_to_sint.i64 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   cvt_float32_to_sint64_seq rax, xmm0, rdx, xmm3
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   cvttss2si rax, xmm0
;   cmp rax, 1
;   jno 0x3b
;   ucomiss xmm0, xmm0
;   jp 0x40
;   mov edx, 0xdf000000
;   movd xmm3, edx
;   ucomiss xmm0, xmm3
;   jb 0x42
;   xorpd xmm3, xmm3
;   ucomiss xmm3, xmm0
;   jb 0x44
;   mov rsp, rbp
;   pop rbp
;   ret
;   ud2 ; trap: bad_toint
;   ud2 ; trap: int_ovf
;   ud2 ; trap: int_ovf

function %f23(f64) -> i32 {
block0(v0: f64):
  v1 = fcvt_to_sint.i32 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   cvt_float64_to_sint32_seq eax, xmm0, rdx, xmm3
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   cvttsd2si eax, xmm0
;   cmp eax, 1
;   jno 0x42
;   ucomisd xmm0, xmm0
;   jp 0x47
;   movabs rdx, 0xc1e0000000200000
;   movq xmm3, rdx
;   ucomisd xmm0, xmm3
;   jbe 0x49
;   xorpd xmm3, xmm3
;   ucomisd xmm3, xmm0
;   jb 0x4b
;   mov rsp, rbp
;   pop rbp
;   ret
;   ud2 ; trap: bad_toint
;   ud2 ; trap: int_ovf
;   ud2 ; trap: int_ovf

function %f24(f64) -> i64 {
block0(v0: f64):
  v1 = fcvt_to_sint.i64 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   cvt_float64_to_sint64_seq rax, xmm0, rdx, xmm3
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   cvttsd2si rax, xmm0
;   cmp rax, 1
;   jno 0x44
;   ucomisd xmm0, xmm0
;   jp 0x49
;   movabs rdx, 0xc3e0000000000000
;   movq xmm3, rdx
;   ucomisd xmm0, xmm3
;   jb 0x4b
;   xorpd xmm3, xmm3
;   ucomisd xmm3, xmm0
;   jb 0x4d
;   mov rsp, rbp
;   pop rbp
;   ret
;   ud2 ; trap: bad_toint
;   ud2 ; trap: int_ovf
;   ud2 ; trap: int_ovf

function %f25(f32) -> i32 {
block0(v0: f32):
  v1 = fcvt_to_sint_sat.i32 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   cvt_float32_to_sint32_sat_seq eax, xmm0, rdx, xmm3
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   cvttss2si eax, xmm0
;   cmp eax, 1
;   jno 0x33
;   ucomiss xmm0, xmm0
;   jnp 0x21
;   xor eax, eax
;   jmp 0x33
;   xorpd xmm3, xmm3
;   ucomiss xmm3, xmm0
;   jae 0x33
;   mov eax, 0x7fffffff
;   mov rsp, rbp
;   pop rbp
;   ret

function %f26(f32) -> i64 {
block0(v0: f32):
  v1 = fcvt_to_sint_sat.i64 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   cvt_float32_to_sint64_sat_seq rax, xmm0, rdx, xmm3
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   cvttss2si rax, xmm0
;   cmp rax, 1
;   jno 0x3b
;   ucomiss xmm0, xmm0
;   jnp 0x24
;   xor rax, rax
;   jmp 0x3b
;   xorpd xmm3, xmm3
;   ucomiss xmm3, xmm0
;   jae 0x3b
;   movabs rax, 0x7fffffffffffffff
;   mov rsp, rbp
;   pop rbp
;   ret

function %f27(f64) -> i32 {
block0(v0: f64):
  v1 = fcvt_to_sint_sat.i32 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   cvt_float64_to_sint32_sat_seq eax, xmm0, rdx, xmm3
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   cvttsd2si eax, xmm0
;   cmp eax, 1
;   jno 0x35
;   ucomisd xmm0, xmm0
;   jnp 0x22
;   xor eax, eax
;   jmp 0x35
;   xorpd xmm3, xmm3
;   ucomisd xmm3, xmm0
;   jae 0x35
;   mov eax, 0x7fffffff
;   mov rsp, rbp
;   pop rbp
;   ret

function %f28(f64) -> i64 {
block0(v0: f64):
  v1 = fcvt_to_sint_sat.i64 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   cvt_float64_to_sint64_sat_seq rax, xmm0, rdx, xmm3
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   cvttsd2si rax, xmm0
;   cmp rax, 1
;   jno 0x3d
;   ucomisd xmm0, xmm0
;   jnp 0x25
;   xor rax, rax
;   jmp 0x3d
;   xorpd xmm3, xmm3
;   ucomisd xmm3, xmm0
;   jae 0x3d
;   movabs rax, 0x7fffffffffffffff
;   mov rsp, rbp
;   pop rbp
;   ret

function %f29(f32x4) -> i32x4 {
block0(v0: f32x4):
  v1 = fcvt_to_uint_sat.i32x4 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   uninit xmm6
;   xorps xmm6, xmm6, xmm6
;   movdqa xmm11, xmm0
;   maxps xmm11, xmm11, xmm6
;   pcmpeqd xmm6, xmm6, xmm6
;   psrld xmm6, xmm6, $1
;   cvtdq2ps xmm15, xmm6
;   cvttps2dq xmm14, xmm11
;   subps xmm11, xmm11, xmm15
;   cmpps xmm15, xmm15, xmm11, 0x2
;   cvttps2dq xmm0, xmm11
;   pxor xmm0, xmm0, xmm15
;   uninit xmm9
;   pxor xmm9, xmm9, xmm9
;   pmaxsd xmm0, xmm0, xmm9
;   paddd xmm0, xmm0, xmm14
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   xorps xmm6, xmm6
;   movdqa xmm11, xmm0
;   maxps xmm11, xmm6
;   pcmpeqd xmm6, xmm6
;   psrld xmm6, 1
;   cvtdq2ps xmm15, xmm6
;   cvttps2dq xmm14, xmm11
;   subps xmm11, xmm15
;   cmpleps xmm15, xmm11
;   cvttps2dq xmm0, xmm11
;   pxor xmm0, xmm15
;   pxor xmm9, xmm9
;   pmaxsd xmm0, xmm9
;   paddd xmm0, xmm14
;   mov rsp, rbp
;   pop rbp
;   ret

function %f30(f32x4) -> i32x4 {
block0(v0: f32x4):
  v1 = fcvt_to_sint_sat.i32x4 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movdqa xmm4, xmm0
;   cmpps xmm4, xmm4, xmm0, 0x0
;   movdqa xmm5, xmm0
;   andps xmm5, xmm5, xmm4
;   pxor xmm4, xmm4, xmm5
;   cvttps2dq xmm8, xmm5
;   movdqa xmm0, xmm8
;   pand xmm0, xmm0, xmm4
;   psrad xmm0, xmm0, $31
;   pxor xmm0, xmm0, xmm8
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movdqa xmm4, xmm0
;   cmpeqps xmm4, xmm0
;   movdqa xmm5, xmm0
;   andps xmm5, xmm4
;   pxor xmm4, xmm5
;   cvttps2dq xmm8, xmm5
;   movdqa xmm0, xmm8
;   pand xmm0, xmm4
;   psrad xmm0, 0x1f
;   pxor xmm0, xmm8
;   mov rsp, rbp
;   pop rbp
;   ret

