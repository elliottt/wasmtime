test compile precise-output
set enable_llvm_abi_extensions=true
target x86_64



function %ishl_i128_i128(i128, i8) -> i128 {
block0(v0: i128, v1: i8):
    v2 = uextend.i64 v1
    v3 = iconcat v2, v2

    v4 = ishl.i128 v0, v3

    return v4
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movzx rcx, dl
;   mov rdx, rdi
;   shl rdx, rdx, cl
;   mov r11, rsi
;   shl r11, r11, cl
;   mov r9, rcx
;   mov ecx, 0x40
;   mov r8, r9
;   sub rcx, rcx, r8
;   mov r10, rdi
;   shr r10, r10, cl
;   xor rax, rax, rax
;   test r8, $127
;   cmovz r10, rax, r10
;   or r10, r10, r11
;   test r8, $64
;   cmovz rax, rdx, rax
;   cmovz rdx, r10, rdx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movzx rcx, dl
;   mov rdx, rdi
;   shl rdx, cl
;   mov r11, rsi
;   shl r11, cl
;   mov r9, rcx
;   mov ecx, 0x40
;   mov r8, r9
;   sub rcx, r8
;   mov r10, rdi
;   shr r10, cl
;   xor rax, rax
;   test r8, 0x7f
;   cmove r10, rax
;   or r10, r11
;   test r8, 0x40
;   cmove rax, rdx
;   cmove rdx, r10
;   mov rsp, rbp
;   pop rbp
;   ret

function %ishl_i128_i64(i128, i64) -> i128 {
block0(v0: i128, v1: i64):
    v2 = ishl.i128 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rdx
;   mov r9, rdx
;   mov rdx, rdi
;   shl rdx, rdx, cl
;   mov r10, rsi
;   shl r10, r10, cl
;   mov r9, rcx
;   mov ecx, 0x40
;   mov rsi, r9
;   sub rcx, rcx, rsi
;   mov r9, rdi
;   shr r9, r9, cl
;   xor rax, rax, rax
;   test rsi, $127
;   cmovz r9, rax, r9
;   or r9, r9, r10
;   test rsi, $64
;   cmovz rax, rdx, rax
;   cmovz rdx, r9, rdx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rdx
;   mov r9, rdx
;   mov rdx, rdi
;   shl rdx, cl
;   mov r10, rsi
;   shl r10, cl
;   mov r9, rcx
;   mov ecx, 0x40
;   mov rsi, r9
;   sub rcx, rsi
;   mov r9, rdi
;   shr r9, cl
;   xor rax, rax
;   test rsi, 0x7f
;   cmove r9, rax
;   or r9, r10
;   test rsi, 0x40
;   cmove rax, rdx
;   cmove rdx, r9
;   mov rsp, rbp
;   pop rbp
;   ret

function %ishl_i128_i32(i128, i32) -> i128 {
block0(v0: i128, v1: i32):
    v2 = ishl.i128 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rdx
;   mov r9, rdx
;   mov rdx, rdi
;   shl rdx, rdx, cl
;   mov r10, rsi
;   shl r10, r10, cl
;   mov r9, rcx
;   mov ecx, 0x40
;   mov rsi, r9
;   sub rcx, rcx, rsi
;   mov r9, rdi
;   shr r9, r9, cl
;   xor rax, rax, rax
;   test rsi, $127
;   cmovz r9, rax, r9
;   or r9, r9, r10
;   test rsi, $64
;   cmovz rax, rdx, rax
;   cmovz rdx, r9, rdx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rdx
;   mov r9, rdx
;   mov rdx, rdi
;   shl rdx, cl
;   mov r10, rsi
;   shl r10, cl
;   mov r9, rcx
;   mov ecx, 0x40
;   mov rsi, r9
;   sub rcx, rsi
;   mov r9, rdi
;   shr r9, cl
;   xor rax, rax
;   test rsi, 0x7f
;   cmove r9, rax
;   or r9, r10
;   test rsi, 0x40
;   cmove rax, rdx
;   cmove rdx, r9
;   mov rsp, rbp
;   pop rbp
;   ret

function %ishl_i128_i16(i128, i16) -> i128 {
block0(v0: i128, v1: i16):
    v2 = ishl.i128 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rdx
;   mov r9, rdx
;   mov rdx, rdi
;   shl rdx, rdx, cl
;   mov r10, rsi
;   shl r10, r10, cl
;   mov r9, rcx
;   mov ecx, 0x40
;   mov rsi, r9
;   sub rcx, rcx, rsi
;   mov r9, rdi
;   shr r9, r9, cl
;   xor rax, rax, rax
;   test rsi, $127
;   cmovz r9, rax, r9
;   or r9, r9, r10
;   test rsi, $64
;   cmovz rax, rdx, rax
;   cmovz rdx, r9, rdx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rdx
;   mov r9, rdx
;   mov rdx, rdi
;   shl rdx, cl
;   mov r10, rsi
;   shl r10, cl
;   mov r9, rcx
;   mov ecx, 0x40
;   mov rsi, r9
;   sub rcx, rsi
;   mov r9, rdi
;   shr r9, cl
;   xor rax, rax
;   test rsi, 0x7f
;   cmove r9, rax
;   or r9, r10
;   test rsi, 0x40
;   cmove rax, rdx
;   cmove rdx, r9
;   mov rsp, rbp
;   pop rbp
;   ret

function %ishl_i128_i8(i128, i8) -> i128 {
block0(v0: i128, v1: i8):
    v2 = ishl.i128 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rdx
;   mov r9, rdx
;   mov rdx, rdi
;   shl rdx, rdx, cl
;   mov r10, rsi
;   shl r10, r10, cl
;   mov r9, rcx
;   mov ecx, 0x40
;   mov rsi, r9
;   sub rcx, rcx, rsi
;   mov r9, rdi
;   shr r9, r9, cl
;   xor rax, rax, rax
;   test rsi, $127
;   cmovz r9, rax, r9
;   or r9, r9, r10
;   test rsi, $64
;   cmovz rax, rdx, rax
;   cmovz rdx, r9, rdx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rdx
;   mov r9, rdx
;   mov rdx, rdi
;   shl rdx, cl
;   mov r10, rsi
;   shl r10, cl
;   mov r9, rcx
;   mov ecx, 0x40
;   mov rsi, r9
;   sub rcx, rsi
;   mov r9, rdi
;   shr r9, cl
;   xor rax, rax
;   test rsi, 0x7f
;   cmove r9, rax
;   or r9, r10
;   test rsi, 0x40
;   cmove rax, rdx
;   cmove rdx, r9
;   mov rsp, rbp
;   pop rbp
;   ret

function %ishl_i64_i128(i64, i128) -> i64 {
block0(v0: i64, v1: i128):
    v2 = ishl.i64 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   mov rax, rdi
;   shl rax, rax, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   mov rax, rdi
;   shl rax, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ishl_i32_i128(i32, i128) -> i32 {
block0(v0: i32, v1: i128):
    v2 = ishl.i32 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   mov rax, rdi
;   shl eax, eax, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   mov rax, rdi
;   shl eax, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ishl_i16_i128(i16, i128) -> i16 {
block0(v0: i16, v1: i128):
    v2 = ishl.i16 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   and rcx, rcx, $15
;   mov rax, rdi
;   shl ax, ax, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   and rcx, 0xf
;   mov rax, rdi
;   shl ax, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ishl_i8_i128(i8, i128) -> i8 {
block0(v0: i8, v1: i128):
    v2 = ishl.i8 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   and rcx, rcx, $7
;   mov rax, rdi
;   shl al, al, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   and rcx, 7
;   mov rax, rdi
;   shl al, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ishl_i64_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = ishl.i64 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   mov rax, rdi
;   shl rax, rax, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   mov rax, rdi
;   shl rax, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ishl_i64_i32(i64, i32) -> i64 {
block0(v0: i64, v1: i32):
    v2 = ishl.i64 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   mov rax, rdi
;   shl rax, rax, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   mov rax, rdi
;   shl rax, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ishl_i64_i16(i64, i16) -> i64 {
block0(v0: i64, v1: i16):
    v2 = ishl.i64 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   mov rax, rdi
;   shl rax, rax, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   mov rax, rdi
;   shl rax, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ishl_i64_i8(i64, i8) -> i64 {
block0(v0: i64, v1: i8):
    v2 = ishl.i64 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   mov rax, rdi
;   shl rax, rax, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   mov rax, rdi
;   shl rax, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ishl_i32_i64(i32, i64) -> i32 {
block0(v0: i32, v1: i64):
    v2 = ishl.i32 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   mov rax, rdi
;   shl eax, eax, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   mov rax, rdi
;   shl eax, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ishl_i32_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = ishl.i32 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   mov rax, rdi
;   shl eax, eax, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   mov rax, rdi
;   shl eax, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ishl_i32_i16(i32, i16) -> i32 {
block0(v0: i32, v1: i16):
    v2 = ishl.i32 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   mov rax, rdi
;   shl eax, eax, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   mov rax, rdi
;   shl eax, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ishl_i32_i8(i32, i8) -> i32 {
block0(v0: i32, v1: i8):
    v2 = ishl.i32 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   mov rax, rdi
;   shl eax, eax, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   mov rax, rdi
;   shl eax, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ishl_i16_i64(i16, i64) -> i16 {
block0(v0: i16, v1: i64):
    v2 = ishl.i16 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   and rcx, rcx, $15
;   mov rax, rdi
;   shl ax, ax, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   and rcx, 0xf
;   mov rax, rdi
;   shl ax, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ishl_i16_i32(i16, i32) -> i16 {
block0(v0: i16, v1: i32):
    v2 = ishl.i16 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   and rcx, rcx, $15
;   mov rax, rdi
;   shl ax, ax, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   and rcx, 0xf
;   mov rax, rdi
;   shl ax, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ishl_i16_i16(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
    v2 = ishl.i16 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   and rcx, rcx, $15
;   mov rax, rdi
;   shl ax, ax, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   and rcx, 0xf
;   mov rax, rdi
;   shl ax, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ishl_i16_i8(i16, i8) -> i16 {
block0(v0: i16, v1: i8):
    v2 = ishl.i16 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   and rcx, rcx, $15
;   mov rax, rdi
;   shl ax, ax, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   and rcx, 0xf
;   mov rax, rdi
;   shl ax, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ishl_i8_i64(i8, i64) -> i8 {
block0(v0: i8, v1: i64):
    v2 = ishl.i8 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   and rcx, rcx, $7
;   mov rax, rdi
;   shl al, al, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   and rcx, 7
;   mov rax, rdi
;   shl al, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ishl_i8_i32(i8, i32) -> i8 {
block0(v0: i8, v1: i32):
    v2 = ishl.i8 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   and rcx, rcx, $7
;   mov rax, rdi
;   shl al, al, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   and rcx, 7
;   mov rax, rdi
;   shl al, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ishl_i8_i16(i8, i16) -> i8 {
block0(v0: i8, v1: i16):
    v2 = ishl.i8 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   and rcx, rcx, $7
;   mov rax, rdi
;   shl al, al, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   and rcx, 7
;   mov rax, rdi
;   shl al, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ishl_i8_i8(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
    v2 = ishl.i8 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   and rcx, rcx, $7
;   mov rax, rdi
;   shl al, al, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   and rcx, 7
;   mov rax, rdi
;   shl al, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ishl_i64_const(i64) -> i64 {
block0(v0: i64):
    v1 = ishl_imm.i64 v0, 65
    return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   shl rax, rax, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   shl rax, 1
;   mov rsp, rbp
;   pop rbp
;   ret

function %ishl_i32_const(i32) -> i32 {
block0(v0: i32):
    v1 = ishl_imm.i32 v0, 33
    return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   shl eax, eax, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   shl eax, 1
;   mov rsp, rbp
;   pop rbp
;   ret

function %ishl_i16_const(i16) -> i16 {
block0(v0: i16):
    v1 = ishl_imm.i16 v0, 17
    return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   shl ax, ax, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   shl ax, 1
;   mov rsp, rbp
;   pop rbp
;   ret

function %ishl_i8_const(i8) -> i8 {
block0(v0: i8):
    v1 = ishl_imm.i8 v0, 9
    return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   shl al, al, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   shl al, 1
;   mov rsp, rbp
;   pop rbp
;   ret

