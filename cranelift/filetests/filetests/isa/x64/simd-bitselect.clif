test compile precise-output
set enable_simd
target x86_64

function %mask_from_icmp(i8x16, i8x16) -> i8x16 {
block0(v0: i8x16, v1: i8x16):
    v2 = icmp eq v0, v1
    v3 = bitselect v2, v0, v1
    return v3
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movdqa xmm4, xmm0
;   pcmpeqb xmm4, xmm4, xmm1
;   movdqa xmm7, xmm0
;   movdqa xmm0, xmm4
;   movdqa xmm4, xmm1
;   pblendvb xmm4, xmm4, xmm7
;   movdqa xmm0, xmm4
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movdqa xmm4, xmm0
;   pcmpeqb xmm4, xmm1
;   movdqa xmm7, xmm0
;   movdqa xmm0, xmm4
;   movdqa xmm4, xmm1
;   pblendvb xmm4, xmm7, xmm0
;   movdqa xmm0, xmm4
;   mov rsp, rbp
;   pop rbp
;   ret

function %mask_from_fcmp(f32x4, f32x4, i32x4, i32x4) -> i32x4  {
block0(v0: f32x4, v1: f32x4, v2: i32x4, v3: i32x4):
    v4 = fcmp eq v0, v1
    v5 = bitselect v4, v2, v3
    return v5
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   cmpps xmm0, xmm0, xmm1, 0x0
;   movdqa xmm6, xmm3
;   pblendvb xmm6, xmm6, xmm2
;   movdqa xmm0, xmm6
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   cmpeqps xmm0, xmm1
;   movdqa xmm6, xmm3
;   pblendvb xmm6, xmm2, xmm0
;   movdqa xmm0, xmm6
;   mov rsp, rbp
;   pop rbp
;   ret

function %mask_casted(i8x16, i8x16, i32x4) -> i8x16 {
block0(v0: i8x16, v1: i8x16, v2: i32x4):
    v3 = bitcast.i8x16 little v2
    v4 = bitselect v3, v0, v1
    return v4
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movdqa xmm4, xmm0
;   pand xmm4, xmm4, xmm2
;   movdqa xmm0, xmm2
;   pandn xmm0, xmm0, xmm1
;   por xmm0, xmm0, xmm4
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movdqa xmm4, xmm0
;   pand xmm4, xmm2
;   movdqa xmm0, xmm2
;   pandn xmm0, xmm1
;   por xmm0, xmm4
;   mov rsp, rbp
;   pop rbp
;   ret

function %good_const_mask_i8x16(i8x16, i8x16) -> i8x16 {
block0(v0: i8x16, v1: i8x16):
    v3 = vconst.i8x16 [0 0 0xFF 0 0 0xFF 0 0 0 0 0xFF 0 0 0 0 0xFF]
    v4 = bitselect v3, v0, v1
    return v4
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movdqa xmm5, xmm0
;   movdqu xmm0, const(0)
;   movdqa xmm6, xmm5
;   movdqa xmm4, xmm1
;   pblendvb xmm4, xmm4, xmm6
;   movdqa xmm0, xmm4
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movdqa xmm5, xmm0
;   movdqu xmm0, xmmword ptr [rip + 0x20]
;   movdqa xmm6, xmm5
;   movdqa xmm4, xmm1
;   pblendvb xmm4, xmm6, xmm0
;   movdqa xmm0, xmm4
;   mov rsp, rbp
;   pop rbp
;   ret
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   inc dword ptr [rax]
;   add bh, bh
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   inc dword ptr [rax]
;   add byte ptr [rax], al
;   add bh, bh

function %good_const_mask_i16x8(i16x8, i16x8) -> i16x8 {
block0(v0: i16x8, v1: i16x8):
    v3 = vconst.i16x8 [0x0000 0xFF00 0x0000 0x00FF 0x0000 0xFFFF 0x00FF 0xFFFF]
    v4 = bitselect v3, v0, v1
    return v4
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movdqa xmm5, xmm0
;   movdqu xmm0, const(0)
;   movdqa xmm6, xmm5
;   movdqa xmm4, xmm1
;   pblendvb xmm4, xmm4, xmm6
;   movdqa xmm0, xmm4
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movdqa xmm5, xmm0
;   movdqu xmm0, xmmword ptr [rip + 0x20]
;   movdqa xmm6, xmm5
;   movdqa xmm4, xmm1
;   pblendvb xmm4, xmm6, xmm0
;   movdqa xmm0, xmm4
;   mov rsp, rbp
;   pop rbp
;   ret
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add bh, bh
;   add byte ptr [rax], al
;   inc dword ptr [rax]
;   add byte ptr [rax], al

function %bad_const_mask(i8x16, i8x16) -> i8x16 {
block0(v0: i8x16, v1: i8x16):
    v3 = vconst.i8x16 [0 0 0xF0 0 0 0xFF 0 0 0 0 0xFF 0 0 0 0 0xFF]
    v4 = bitselect v3, v0, v1
    return v4
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movdqa xmm8, xmm0
;   movdqu xmm0, const(0)
;   movdqa xmm4, xmm8
;   pand xmm4, xmm4, xmm0
;   pandn xmm0, xmm0, xmm1
;   por xmm0, xmm0, xmm4
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movdqa xmm8, xmm0
;   movdqu xmm0, xmmword ptr [rip + 0x1f]
;   movdqa xmm4, xmm8
;   pand xmm4, xmm0
;   pandn xmm0, xmm1
;   por xmm0, xmm4
;   mov rsp, rbp
;   pop rbp
;   ret
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add byte ptr [rax], al
;   add al, dh
;   add byte ptr [rax], al
;   inc dword ptr [rax]
;   add byte ptr [rax], al
;   add bh, bh
;   add byte ptr [rax], al
;   add byte ptr [rax], al

