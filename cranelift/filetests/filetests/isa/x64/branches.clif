test compile precise-output
target x86_64

function %f0(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = icmp eq v0, v1
  brif v2, block1, block2

block1:
  v3 = iconst.i32 1
  return v3

block2:
  v4 = iconst.i32 2
  return v4
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   cmp edi, esi
;   jz label2; j label1
; block1:
;   mov eax, 0x2
;   mov rsp, rbp
;   pop rbp
;   ret
; block2:
;   mov eax, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   cmp edi, esi
;   je 0x16
; block2: ; offset 0xc
;   mov eax, 2
;   mov rsp, rbp
;   pop rbp
;   ret
; block3: ; offset 0x16
;   mov eax, 1
;   mov rsp, rbp
;   pop rbp
;   ret

function %f1(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = icmp eq v0, v1
  brif v2, block2, block1

block1:
  v3 = iconst.i32 1
  return v3

block2:
  v4 = iconst.i32 2
  return v4
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   cmp edi, esi
;   jz label2; j label1
; block1:
;   mov eax, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; block2:
;   mov eax, 0x2
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   cmp edi, esi
;   je 0x16
; block2: ; offset 0xc
;   mov eax, 1
;   mov rsp, rbp
;   pop rbp
;   ret
; block3: ; offset 0x16
;   mov eax, 2
;   mov rsp, rbp
;   pop rbp
;   ret

function %f2(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = icmp eq v0, v1
  brif v2, block1, block2

block1:
  v3 = iconst.i32 1
  return v3

block2:
  v4 = iconst.i32 2
  return v4
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   cmp edi, esi
;   jz label2; j label1
; block1:
;   mov eax, 0x2
;   mov rsp, rbp
;   pop rbp
;   ret
; block2:
;   mov eax, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   cmp edi, esi
;   je 0x16
; block2: ; offset 0xc
;   mov eax, 2
;   mov rsp, rbp
;   pop rbp
;   ret
; block3: ; offset 0x16
;   mov eax, 1
;   mov rsp, rbp
;   pop rbp
;   ret

function %f3(f32, f32) -> i32 {
block0(v0: f32, v1: f32):
  v2 = fcmp eq v0, v1
  brif v2, block1, block2

block1:
  v3 = iconst.i32 1
  return v3

block2:
  v4 = iconst.i32 2
  return v4
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   ucomiss xmm0, xmm1
;   jp label1
;   jnz label1; j label2
; block1:
;   mov eax, 0x2
;   mov rsp, rbp
;   pop rbp
;   ret
; block2:
;   mov eax, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   ucomiss xmm0, xmm1
;   jp 0x13
;   je 0x1d
; block2: ; offset 0x13
;   mov eax, 2
;   mov rsp, rbp
;   pop rbp
;   ret
; block3: ; offset 0x1d
;   mov eax, 1
;   mov rsp, rbp
;   pop rbp
;   ret

function %f4(f32, f32) -> i8 {
block0(v0: f32, v1: f32):
  v2 = fcmp eq v0, v1
  brif v2, block2, block1
block1:
  v3 = iconst.i8 1
  return v3
block2:
  v4 = iconst.i8 0
  return v4
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   ucomiss xmm0, xmm1
;   jp label1
;   jnz label1; j label2
; block1:
;   mov eax, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; block2:
;   xor eax, eax, eax
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   ucomiss xmm0, xmm1
;   jp 0x13
;   je 0x1d
; block2: ; offset 0x13
;   mov eax, 1
;   mov rsp, rbp
;   pop rbp
;   ret
; block3: ; offset 0x1d
;   xor eax, eax
;   mov rsp, rbp
;   pop rbp
;   ret

function %f4(f32, f32) -> i8 {
block0(v0: f32, v1: f32):
  v2 = fcmp ne v0, v1
  brif v2, block2, block1
block1:
  v3 = iconst.i8 1
  return v3
block2:
  v4 = iconst.i8 0
  return v4
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   ucomiss xmm0, xmm1
;   jp label2
;   jnz label2; j label1
; block1:
;   mov eax, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; block2:
;   xor eax, eax, eax
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   ucomiss xmm0, xmm1
;   jp 0x1d
;   jne 0x1d
; block2: ; offset 0x13
;   mov eax, 1
;   mov rsp, rbp
;   pop rbp
;   ret
; block3: ; offset 0x1d
;   xor eax, eax
;   mov rsp, rbp
;   pop rbp
;   ret

function %f5(i32) -> i8 {
block0(v0: i32):
  br_table v0, block1, [block1, block2]

block1:
  v1 = iconst.i8 1
  return v1

block2:
  v2 = iconst.i8 0
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov r9d, 0x2
;   mov r10d, edi
;   cmp r10d, r9d
;   cmovb r9d, r10d, r9d
;   br_table r9, rax, rcx
; block1:
;   jmp label4
; block2:
;   jmp label4
; block3:
;   xor eax, eax, eax
;   mov rsp, rbp
;   pop rbp
;   ret
; block4:
;   mov eax, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov r9d, 2
;   mov r10d, edi
;   cmp r10d, r9d
;   cmovb r9d, r10d
;   lea rax, [rip + 9]
;   movsxd rcx, dword ptr [rax + r9*4]
;   add rax, rcx
;   jmp rax
;   sbb byte ptr [rax], al
;   add byte ptr [rax], al
;   adc dword ptr [rax], eax
;   add byte ptr [rax], al
;   sbb byte ptr [rax], al
;   add byte ptr [rax], al
; block2: ; offset 0x30
;   jmp 0x3c
; block3: ; offset 0x35
;   xor eax, eax
;   mov rsp, rbp
;   pop rbp
;   ret
; block4: ; offset 0x3c
;   mov eax, 1
;   mov rsp, rbp
;   pop rbp
;   ret

function %f6(i64) -> i8 {
block0(v0: i64):
  v1 = iconst.i64 0
  v2 = icmp slt v0, v1
  brif v2, block1, block2
block1:
  v3 = iconst.i8 1
  return v3
block2:
  v4 = iconst.i8 0
  return v4
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   test rdi, rdi
;   jl label2; j label1
; block1:
;   xor eax, eax, eax
;   mov rsp, rbp
;   pop rbp
;   ret
; block2:
;   mov eax, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   test rdi, rdi
;   jl 0x14
; block2: ; offset 0xd
;   xor eax, eax
;   mov rsp, rbp
;   pop rbp
;   ret
; block3: ; offset 0x14
;   mov eax, 1
;   mov rsp, rbp
;   pop rbp
;   ret

function %f7(i32) -> i8 {
block0(v0: i32):
  v1 = iconst.i32 0
  v2 = icmp slt v0, v1
  brif v2, block1, block2
block1:
  v3 = iconst.i8 1
  return v3
block2:
  v4 = iconst.i8 0
  return v4
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   test edi, edi
;   jl label2; j label1
; block1:
;   xor eax, eax, eax
;   mov rsp, rbp
;   pop rbp
;   ret
; block2:
;   mov eax, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   test edi, edi
;   jl 0x13
; block2: ; offset 0xc
;   xor eax, eax
;   mov rsp, rbp
;   pop rbp
;   ret
; block3: ; offset 0x13
;   mov eax, 1
;   mov rsp, rbp
;   pop rbp
;   ret

function %f8(i64) -> i8 {
block0(v0: i64):
  v1 = iconst.i64 0
  v2 = icmp eq v0, v1
  brif v2, block1, block2
block1:
  v3 = iconst.i8 1
  return v3
block2:
  v4 = iconst.i8 0
  return v4
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   test rdi, rdi
;   jz label2; j label1
; block1:
;   xor eax, eax, eax
;   mov rsp, rbp
;   pop rbp
;   ret
; block2:
;   mov eax, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   test rdi, rdi
;   je 0x14
; block2: ; offset 0xd
;   xor eax, eax
;   mov rsp, rbp
;   pop rbp
;   ret
; block3: ; offset 0x14
;   mov eax, 1
;   mov rsp, rbp
;   pop rbp
;   ret

function %f9(i32) -> i8 {
block0(v0: i32):
  v1 = iconst.i32 0
  v2 = icmp eq v0, v1
  brif v2, block1, block2
block1:
  v3 = iconst.i8 1
  return v3
block2:
  v4 = iconst.i8 0
  return v4
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   test edi, edi
;   jz label2; j label1
; block1:
;   xor eax, eax, eax
;   mov rsp, rbp
;   pop rbp
;   ret
; block2:
;   mov eax, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   test edi, edi
;   je 0x13
; block2: ; offset 0xc
;   xor eax, eax
;   mov rsp, rbp
;   pop rbp
;   ret
; block3: ; offset 0x13
;   mov eax, 1
;   mov rsp, rbp
;   pop rbp
;   ret

function %f10(i64) -> i8 {
block0(v0: i64):
  v1 = iconst.i64 0
  v2 = icmp slt v1, v0
  brif v2, block1, block2
block1:
  v3 = iconst.i8 1
  return v3
block2:
  v4 = iconst.i8 0
  return v4
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   test rdi, rdi
;   jnle label2; j label1
; block1:
;   xor eax, eax, eax
;   mov rsp, rbp
;   pop rbp
;   ret
; block2:
;   mov eax, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   test rdi, rdi
;   jg 0x14
; block2: ; offset 0xd
;   xor eax, eax
;   mov rsp, rbp
;   pop rbp
;   ret
; block3: ; offset 0x14
;   mov eax, 1
;   mov rsp, rbp
;   pop rbp
;   ret

function %fflags(f32) {
block200(v0: f32):
    v1 = f32const 0x34.0p0
    v2 = fcmp eq v0, v1
    brif v2, block201, block400

block400:
    v3 = fcmp ord v0, v1
    brif v3, block202, block201

block401:
    return

block201:
    return

block202:
    trap heap_oob
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov eax, 0x42500000
;   movd xmm4, eax
;   ucomiss xmm0, xmm4
;   jp label2
;   jnz label2; j label1
; block1:
;   jmp label5
; block2:
;   ucomiss xmm0, xmm4
;   jnp label4; j label3
; block3:
;   jmp label5
; block4:
;   ud2 heap_oob
; block5:
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov eax, 0x42500000
;   movd xmm4, eax
;   ucomiss xmm0, xmm4
;   jp 0x1c
;   je 0x27
; block2: ; offset 0x1c
;   ucomiss xmm0, xmm4
;   jp 0x27
; block3: ; offset 0x25
;   ud2 ; trap: heap_oob
; block4: ; offset 0x27
;   mov rsp, rbp
;   pop rbp
;   ret

function %br_i8_icmp(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = icmp eq v0, v1
  v3 = uextend.i32 v2
  brif v3, block1, block2

block1:
  v4 = iconst.i32 1
  return v4

block2:
  v5 = iconst.i32 2
  return v5
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   cmp edi, esi
;   jz label2; j label1
; block1:
;   mov eax, 0x2
;   mov rsp, rbp
;   pop rbp
;   ret
; block2:
;   mov eax, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   cmp edi, esi
;   je 0x16
; block2: ; offset 0xc
;   mov eax, 2
;   mov rsp, rbp
;   pop rbp
;   ret
; block3: ; offset 0x16
;   mov eax, 1
;   mov rsp, rbp
;   pop rbp
;   ret

function %br_i8_fcmp(f32, f32) -> i32 {
block0(v0: f32, v1: f32):
  v2 = fcmp eq v0, v1
  v3 = uextend.i32 v2
  brif v3, block1, block2

block1:
  v4 = iconst.i32 1
  return v4

block2:
  v5 = iconst.i32 2
  return v5
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   ucomiss xmm0, xmm1
;   jp label1
;   jnz label1; j label2
; block1:
;   mov eax, 0x2
;   mov rsp, rbp
;   pop rbp
;   ret
; block2:
;   mov eax, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   ucomiss xmm0, xmm1
;   jp 0x13
;   je 0x1d
; block2: ; offset 0x13
;   mov eax, 2
;   mov rsp, rbp
;   pop rbp
;   ret
; block3: ; offset 0x1d
;   mov eax, 1
;   mov rsp, rbp
;   pop rbp
;   ret

function %brif_i8_icmp(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = icmp eq v0, v1
  v3 = uextend.i32 v2
  brif v3, block1, block2

block1:
  v4 = iconst.i32 1
  return v4

block2:
  v5 = iconst.i32 2
  return v5
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   cmp edi, esi
;   jz label2; j label1
; block1:
;   mov eax, 0x2
;   mov rsp, rbp
;   pop rbp
;   ret
; block2:
;   mov eax, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   cmp edi, esi
;   je 0x16
; block2: ; offset 0xc
;   mov eax, 2
;   mov rsp, rbp
;   pop rbp
;   ret
; block3: ; offset 0x16
;   mov eax, 1
;   mov rsp, rbp
;   pop rbp
;   ret

function %brif_i8_fcmp(f32, f32) -> i32 {
block0(v0: f32, v1: f32):
  v2 = fcmp eq v0, v1
  v3 = uextend.i32 v2
  brif v3, block1, block2

block1:
  v4 = iconst.i32 1
  return v4

block2:
  v5 = iconst.i32 2
  return v5
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   ucomiss xmm0, xmm1
;   jp label1
;   jnz label1; j label2
; block1:
;   mov eax, 0x2
;   mov rsp, rbp
;   pop rbp
;   ret
; block2:
;   mov eax, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   ucomiss xmm0, xmm1
;   jp 0x13
;   je 0x1d
; block2: ; offset 0x13
;   mov eax, 2
;   mov rsp, rbp
;   pop rbp
;   ret
; block3: ; offset 0x1d
;   mov eax, 1
;   mov rsp, rbp
;   pop rbp
;   ret

function %br_table_i32(i32) -> i32 {
block0(v0: i32):
  br_table v0, block4, [block1, block2, block2, block3]

block1:
  v1 = iconst.i32 1
  jump block5(v1)

block2:
  v2 = iconst.i32 2
  jump block5(v2)

block3:
  v3 = iconst.i32 3
  jump block5(v3)

block4:
  v4 = iconst.i32 4
  jump block5(v4)

block5(v5: i32):
  v6 = iadd.i32 v0, v5
  return v6
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov eax, 0x4
;   mov ecx, edi
;   cmp ecx, eax
;   cmovb eax, ecx, eax
;   br_table rax, r9, r10
; block1:
;   jmp label4
; block2:
;   jmp label4
; block3:
;   mov esi, 0x3
;   jmp label7
; block4:
;   mov esi, 0x2
;   jmp label7
; block5:
;   mov esi, 0x1
;   jmp label7
; block6:
;   mov esi, 0x4
;   jmp label7
; block7:
;   lea eax, qword ptr [rdi + rsi]
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov eax, 4
;   mov ecx, edi
;   cmp ecx, eax
;   cmovb eax, ecx
;   lea r9, [rip + 0xa]
;   movsxd r10, dword ptr [r9 + rax*4]
;   add r9, r10
;   jmp r9
;   sub eax, 0x23000000
;   add byte ptr [rax], al
;   add byte ptr [rbx], ah
;   add byte ptr [rax], al
;   add byte ptr [rcx], bl
;   add byte ptr [rax], al
;   add byte ptr [rdi], dh
;   add byte ptr [rax], al
; block2: ; offset 0x35
;   jmp 0x44
; block3: ; offset 0x3a
;   mov esi, 3
;   jmp 0x5d
; block4: ; offset 0x44
;   mov esi, 2
;   jmp 0x5d
; block5: ; offset 0x4e
;   mov esi, 1
;   jmp 0x5d
; block6: ; offset 0x58
;   mov esi, 4
; block7: ; offset 0x5d
;   lea eax, [rdi + rsi]
;   mov rsp, rbp
;   pop rbp
;   ret

function %br_table_i32_inline(i32) -> i32 {
block0(v0: i32):
  v1 = iconst.i32 1
  v2 = iconst.i32 2
  v3 = iconst.i32 3
  v4 = iconst.i32 4
  br_table v0, block1(v4), [block1(v1), block1(v2), block1(v2), block1(v3)]

block1(v5: i32):
  return v5
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov r10d, 0x1
;   mov r11d, 0x2
;   mov esi, 0x3
;   mov eax, 0x4
;   mov r8d, 0x4
;   mov r9d, edi
;   cmp r9d, r8d
;   cmovb r8d, r9d, r8d
;   br_table r8, rdi, rcx
; block1:
;   jmp label6
; block2:
;   mov rax, r10
;   jmp label6
; block3:
;   mov rax, r11
;   jmp label6
; block4:
;   mov rax, r11
;   jmp label6
; block5:
;   mov rax, rsi
;   jmp label6
; block6:
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov r10d, 1
;   mov r11d, 2
;   mov esi, 3
;   mov eax, 4
;   mov r8d, 4
;   mov r9d, edi
;   cmp r9d, r8d
;   cmovb r8d, r9d
;   lea rdi, [rip + 9]
;   movsxd rcx, dword ptr [rdi + r8*4]
;   add rdi, rcx
;   jmp rdi
;   sbb dword ptr [rax], eax
;   add byte ptr [rax], al
;   and dword ptr [rax], eax
;   add byte ptr [rax], al
;   sub dword ptr [rax], eax
;   add byte ptr [rax], al
;   xor dword ptr [rax], eax
;   add byte ptr [rax], al
;   xor al, 0
;   add byte ptr [rax], al
; block2: ; offset 0x4e
;   jmp 0x6e
; block3: ; offset 0x53
;   mov rax, r10
;   jmp 0x6e
; block4: ; offset 0x5b
;   mov rax, r11
;   jmp 0x6e
; block5: ; offset 0x63
;   mov rax, r11
;   jmp 0x6e
; block6: ; offset 0x6b
;   mov rax, rsi
; block7: ; offset 0x6e
;   mov rsp, rbp
;   pop rbp
;   ret

