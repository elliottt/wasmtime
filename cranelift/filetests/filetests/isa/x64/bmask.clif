test compile precise-output
set enable_llvm_abi_extensions
target x86_64


function %bmask_i64_i64(i64) -> i64 {
block0(v0: i64):
  v1 = bmask.i64 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   neg rax, rax
;   mov rax, rdi
;   sbb rax, rax, rdi
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   neg rax
;   mov rax, rdi
;   sbb rax, rdi
;   mov rsp, rbp
;   pop rbp
;   ret

function %bmask_i64_i32(i64) -> i32 {
block0(v0: i64):
  v1 = bmask.i32 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   neg rax, rax
;   mov rax, rdi
;   sbb eax, eax, edi
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   neg rax
;   mov rax, rdi
;   sbb eax, edi
;   mov rsp, rbp
;   pop rbp
;   ret

function %bmask_i64_i16(i64) -> i16 {
block0(v0: i64):
  v1 = bmask.i16 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   neg rax, rax
;   mov rax, rdi
;   sbb eax, eax, edi
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   neg rax
;   mov rax, rdi
;   sbb eax, edi
;   mov rsp, rbp
;   pop rbp
;   ret

function %bmask_i64_i8(i64) -> i8 {
block0(v0: i64):
  v1 = bmask.i8 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   neg rax, rax
;   mov rax, rdi
;   sbb eax, eax, edi
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   neg rax
;   mov rax, rdi
;   sbb eax, edi
;   mov rsp, rbp
;   pop rbp
;   ret

function %bmask_i32_i64(i32) -> i64 {
block0(v0: i32):
  v1 = bmask.i64 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   neg eax, eax
;   mov rax, rdi
;   sbb rax, rax, rdi
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   neg eax
;   mov rax, rdi
;   sbb rax, rdi
;   mov rsp, rbp
;   pop rbp
;   ret

function %bmask_i32_i32(i32) -> i32 {
block0(v0: i32):
  v1 = bmask.i32 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   neg eax, eax
;   mov rax, rdi
;   sbb eax, eax, edi
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   neg eax
;   mov rax, rdi
;   sbb eax, edi
;   mov rsp, rbp
;   pop rbp
;   ret

function %bmask_i32_i16(i32) -> i16 {
block0(v0: i32):
  v1 = bmask.i16 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   neg eax, eax
;   mov rax, rdi
;   sbb eax, eax, edi
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   neg eax
;   mov rax, rdi
;   sbb eax, edi
;   mov rsp, rbp
;   pop rbp
;   ret

function %bmask_i32_i8(i32) -> i8 {
block0(v0: i32):
  v1 = bmask.i8 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   neg eax, eax
;   mov rax, rdi
;   sbb eax, eax, edi
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   neg eax
;   mov rax, rdi
;   sbb eax, edi
;   mov rsp, rbp
;   pop rbp
;   ret

function %bmask_i16_i64(i16) -> i64 {
block0(v0: i16):
  v1 = bmask.i64 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   neg ax, ax
;   mov rax, rdi
;   sbb rax, rax, rdi
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   neg ax
;   mov rax, rdi
;   sbb rax, rdi
;   mov rsp, rbp
;   pop rbp
;   ret

function %bmask_i16_i32(i16) -> i32 {
block0(v0: i16):
  v1 = bmask.i32 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   neg ax, ax
;   mov rax, rdi
;   sbb eax, eax, edi
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   neg ax
;   mov rax, rdi
;   sbb eax, edi
;   mov rsp, rbp
;   pop rbp
;   ret

function %bmask_i16_i16(i16) -> i16 {
block0(v0: i16):
  v1 = bmask.i16 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   neg ax, ax
;   mov rax, rdi
;   sbb eax, eax, edi
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   neg ax
;   mov rax, rdi
;   sbb eax, edi
;   mov rsp, rbp
;   pop rbp
;   ret

function %bmask_i16_i8(i16) -> i8 {
block0(v0: i16):
  v1 = bmask.i8 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   neg ax, ax
;   mov rax, rdi
;   sbb eax, eax, edi
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   neg ax
;   mov rax, rdi
;   sbb eax, edi
;   mov rsp, rbp
;   pop rbp
;   ret

function %bmask_i8_i64(i8) -> i64 {
block0(v0: i8):
  v1 = bmask.i64 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   neg al, al
;   mov rax, rdi
;   sbb rax, rax, rdi
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   neg al
;   mov rax, rdi
;   sbb rax, rdi
;   mov rsp, rbp
;   pop rbp
;   ret

function %bmask_i8_i32(i8) -> i32 {
block0(v0: i8):
  v1 = bmask.i32 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   neg al, al
;   mov rax, rdi
;   sbb eax, eax, edi
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   neg al
;   mov rax, rdi
;   sbb eax, edi
;   mov rsp, rbp
;   pop rbp
;   ret

function %bmask_i8_i16(i8) -> i16 {
block0(v0: i8):
  v1 = bmask.i16 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   neg al, al
;   mov rax, rdi
;   sbb eax, eax, edi
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   neg al
;   mov rax, rdi
;   sbb eax, edi
;   mov rsp, rbp
;   pop rbp
;   ret

function %bmask_i8_i8(i8) -> i8 {
block0(v0: i8):
  v1 = bmask.i8 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   neg al, al
;   mov rax, rdi
;   sbb eax, eax, edi
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   neg al
;   mov rax, rdi
;   sbb eax, edi
;   mov rsp, rbp
;   pop rbp
;   ret

function %bmask_i128_i128(i128) -> i128 {
block0(v0: i128):
  v1 = bmask.i128 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rdx, rdi
;   or rdx, rdx, rsi
;   mov r8, rdx
;   neg r8, r8
;   sbb rdx, rdx, rdx
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rdx, rdi
;   or rdx, rsi
;   mov r8, rdx
;   neg r8
;   sbb rdx, rdx
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret

function %bmask_i128_i64(i128) -> i64 {
block0(v0: i128):
  v1 = bmask.i64 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   or rax, rax, rsi
;   mov r8, rax
;   neg r8, r8
;   sbb rax, rax, rax
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   or rax, rsi
;   mov r8, rax
;   neg r8
;   sbb rax, rax
;   mov rsp, rbp
;   pop rbp
;   ret

function %bmask_i128_i32(i128) -> i32 {
block0(v0: i128):
  v1 = bmask.i32 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   or rax, rax, rsi
;   mov r8, rax
;   neg r8, r8
;   sbb eax, eax, eax
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   or rax, rsi
;   mov r8, rax
;   neg r8
;   sbb eax, eax
;   mov rsp, rbp
;   pop rbp
;   ret

function %bmask_i128_i16(i128) -> i16 {
block0(v0: i128):
  v1 = bmask.i16 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   or rax, rax, rsi
;   mov r8, rax
;   neg r8, r8
;   sbb eax, eax, eax
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   or rax, rsi
;   mov r8, rax
;   neg r8
;   sbb eax, eax
;   mov rsp, rbp
;   pop rbp
;   ret

function %bmask_i128_i8(i128) -> i8 {
block0(v0: i128):
  v1 = bmask.i8 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   or rax, rax, rsi
;   mov r8, rax
;   neg r8, r8
;   sbb eax, eax, eax
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   or rax, rsi
;   mov r8, rax
;   neg r8
;   sbb eax, eax
;   mov rsp, rbp
;   pop rbp
;   ret

function %bmask_i64_i128(i64) -> i128 {
block0(v0: i64):
  v1 = bmask.i128 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   neg rax, rax
;   mov rdx, rdi
;   sbb rdx, rdx, rdi
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   neg rax
;   mov rdx, rdi
;   sbb rdx, rdi
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret

function %bmask_i32_i128(i32) -> i128 {
block0(v0: i32):
  v1 = bmask.i128 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   neg eax, eax
;   mov rdx, rdi
;   sbb rdx, rdx, rdi
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   neg eax
;   mov rdx, rdi
;   sbb rdx, rdi
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret

function %bmask_i16_i128(i16) -> i128 {
block0(v0: i16):
  v1 = bmask.i128 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   neg ax, ax
;   mov rdx, rdi
;   sbb rdx, rdx, rdi
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   neg ax
;   mov rdx, rdi
;   sbb rdx, rdi
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret

function %bmask_i8_i128(i8) -> i128 {
block0(v0: i8):
  v1 = bmask.i128 v0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   neg al, al
;   mov rdx, rdi
;   sbb rdx, rdx, rdi
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   neg al
;   mov rdx, rdi
;   sbb rdx, rdi
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret

