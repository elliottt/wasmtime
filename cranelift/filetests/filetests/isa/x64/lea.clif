test compile precise-output
target x86_64

function %add_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = iadd v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   lea eax, qword ptr [rdi + rsi]
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   lea eax, [rdi + rsi]
;   mov rsp, rbp
;   pop rbp
;   ret

function %add_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = iadd v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   lea rax, qword ptr [rdi + rsi]
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   lea rax, [rdi + rsi]
;   mov rsp, rbp
;   pop rbp
;   ret

function %add_i32_const(i32) -> i32 {
block0(v0: i32):
  v1 = iconst.i32 100
  v2 = iadd v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   lea eax, qword ptr [rdi + 0x64]
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   lea eax, [rdi + 0x64]
;   mov rsp, rbp
;   pop rbp
;   ret

function %add_i64_const(i64) -> i64 {
block0(v0: i64):
  v1 = iconst.i64 100
  v2 = iadd v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   lea rax, qword ptr [rdi + 0x64]
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   lea rax, [rdi + 0x64]
;   mov rsp, rbp
;   pop rbp
;   ret

function %add_i32_i32_const(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = iconst.i32 100
  v3 = iadd v0, v1
  v4 = iadd v3, v2
  return v4
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   lea eax, qword ptr [rdi + rsi + 100]
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   lea eax, [rdi + rsi + 0x64]
;   mov rsp, rbp
;   pop rbp
;   ret

function %add_i64_i64_const(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = iconst.i64 100
  v3 = iadd v0, v1
  v4 = iadd v3, v2
  return v4
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   lea rax, qword ptr [rdi + rsi + 100]
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   lea rax, [rdi + rsi + 0x64]
;   mov rsp, rbp
;   pop rbp
;   ret

function %add_i32_i32_mul_const(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = iconst.i32 100
  v3 = iconst.i32 2
  v4 = ishl v1, v3
  v5 = iadd v0, v4
  v6 = iadd v5, v2
  return v6
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   lea eax, qword ptr [rdi + rsi * 4 + 100]
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   lea eax, [rdi + rsi*4 + 0x64]
;   mov rsp, rbp
;   pop rbp
;   ret

function %add_i64_i64_mul_const(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = iconst.i64 100
  v3 = iconst.i64 2
  v4 = ishl v1, v3
  v5 = iadd v0, v4
  v6 = iadd v5, v2
  return v6
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   lea rax, qword ptr [rdi + rsi * 4 + 100]
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   lea rax, [rdi + rsi*4 + 0x64]
;   mov rsp, rbp
;   pop rbp
;   ret

function %add_i32_i32_mul(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v3 = iconst.i32 2
  v4 = ishl v1, v3
  v5 = iadd v0, v4
  return v5
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   lea eax, qword ptr [rdi + rsi * 4]
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   lea eax, [rdi + rsi*4]
;   mov rsp, rbp
;   pop rbp
;   ret

function %add_i64_i64_mul(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v3 = iconst.i64 2
  v4 = ishl v1, v3
  v5 = iadd v0, v4
  return v5
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   lea rax, qword ptr [rdi + rsi * 4]
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   lea rax, [rdi + rsi*4]
;   mov rsp, rbp
;   pop rbp
;   ret

