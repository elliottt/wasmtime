test compile precise-output
target x86_64

function %f0(i64, i64) -> i64, i64 {
block0(v0: i64, v1: i64):
    v2 = load.i64 v1
    v3 = icmp eq v0, v2
    v4 = uextend.i64 v3
    v5 = select.i64 v3, v0, v1
    return v4, v5
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov r9, qword ptr [rsi + 0x0]
;   cmp rdi, r9
;   setz r10b
;   movzx rax, r10b
;   cmp rdi, r9
;   mov rdx, rsi
;   cmovz rdx, rdi, rdx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov r9, qword ptr [rsi] ; trap: heap_oob
;   cmp rdi, r9
;   sete r10b
;   movzx rax, r10b
;   cmp rdi, r9
;   mov rdx, rsi
;   cmove rdx, rdi
;   mov rsp, rbp
;   pop rbp
;   ret

function %f1(f64, i64) -> i64, f64 {
block0(v0: f64, v1: i64):
    v2 = load.f64 v1
    v3 = fcmp eq v0, v2
    v4 = uextend.i64 v3
    v5 = select.f64 v3, v0, v0
    return v4, v5
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movsd xmm9, qword ptr [rdi + 0x0]
;   ucomisd xmm0, xmm9
;   setnp dil
;   setz al
;   and edi, edi, eax
;   movzx rax, dil
;   ucomisd xmm0, xmm9
;   movdqa xmm2, xmm0
;   movsd xmm0, xmm0; jnp $next; movsd xmm0, xmm2; $next:
;   movsd xmm0, xmm0; jz $next; movsd xmm0, xmm2; $next:
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movsd xmm9, qword ptr [rdi] ; trap: heap_oob
;   ucomisd xmm0, xmm9
;   setnp dil
;   sete al
;   and edi, eax
;   movzx rax, dil
;   ucomisd xmm0, xmm9
;   movdqa xmm2, xmm0
;   jnp 0x2f
;   movsd xmm0, xmm2
;   je 0x39
;   movsd xmm0, xmm2
;   mov rsp, rbp
;   pop rbp
;   ret

