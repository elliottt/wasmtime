test compile precise-output
target x86_64

function %f0(i8, i32, i32) -> i32 {
block0(v0: i8, v1: i32, v2: i32):
    v3 = select.i32 v0, v1, v2
    return v3
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   test dil, dil
;   mov rax, rdx
;   cmovnz eax, esi, eax
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   test dil, dil
;   mov rax, rdx
;   cmovne eax, esi
;   mov rsp, rbp
;   pop rbp
;   ret

function %f1(i8) -> i32 {
block0(v0: i8):
    brif v0, block1, block2
block1:
    v1 = iconst.i32 1
    return v1
block2:
    v2 = iconst.i32 2
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   test dil, dil
;   jnz label2; j label1
; block1:
;   mov eax, 0x2
;   mov rsp, rbp
;   pop rbp
;   ret
; block2:
;   mov eax, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   test dil, dil
;   jne 0x17
; block2: ; offset 0xd
;   mov eax, 2
;   mov rsp, rbp
;   pop rbp
;   ret
; block3: ; offset 0x17
;   mov eax, 1
;   mov rsp, rbp
;   pop rbp
;   ret

function %f2(i8) -> i32 {
block0(v0: i8):
    brif v0, block2, block1
block1:
    v1 = iconst.i32 1
    return v1
block2:
    v2 = iconst.i32 2
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   test dil, dil
;   jnz label2; j label1
; block1:
;   mov eax, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; block2:
;   mov eax, 0x2
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   test dil, dil
;   jne 0x17
; block2: ; offset 0xd
;   mov eax, 1
;   mov rsp, rbp
;   pop rbp
;   ret
; block3: ; offset 0x17
;   mov eax, 2
;   mov rsp, rbp
;   pop rbp
;   ret

function %f3(i64) -> i32 {
block0(v0: i64):
  v1 = iconst.i32 1
  v2 = load.i32 v0
  v3 = icmp eq v1, v2
  brif v3, block1, block2
block1:
  v4 = iconst.i32 1
  return v4
block2:
  v5 = iconst.i32 1
  return v5
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov edx, dword ptr [rdi + 0x0]
;   cmp edx, $1
;   jz label2; j label1
; block1:
;   mov eax, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; block2:
;   mov eax, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov edx, dword ptr [rdi] ; trap: heap_oob
;   cmp edx, 1
;   je 0x19
; block2: ; offset 0xf
;   mov eax, 1
;   mov rsp, rbp
;   pop rbp
;   ret
; block3: ; offset 0x19
;   mov eax, 1
;   mov rsp, rbp
;   pop rbp
;   ret

function %f4(i64) -> i32 {
block0(v0: i64):
  v1 = iconst.i32 1
  v2 = load.i32 v0
  v3 = icmp eq v2, v1
  brif v3, block1, block2
block1:
  v4 = iconst.i32 1
  return v4
block2:
  v5 = iconst.i32 1
  return v5
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov edx, dword ptr [rdi + 0x0]
;   cmp edx, $1
;   jz label2; j label1
; block1:
;   mov eax, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; block2:
;   mov eax, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov edx, dword ptr [rdi] ; trap: heap_oob
;   cmp edx, 1
;   je 0x19
; block2: ; offset 0xf
;   mov eax, 1
;   mov rsp, rbp
;   pop rbp
;   ret
; block3: ; offset 0x19
;   mov eax, 1
;   mov rsp, rbp
;   pop rbp
;   ret

function %test_x_slt_0_i64(i64) -> i8 {
block0(v0: i64):
    v1 = iconst.i64 0
    v2 = icmp slt v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   shr rax, rax, 0x3f
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   shr rax, 0x3f
;   mov rsp, rbp
;   pop rbp
;   ret

function %test_x_slt_0_i32f4(i32) -> i8 {
block0(v0: i32):
    v1 = iconst.i32 0
    v2 = icmp slt v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   shr eax, eax, 0x1f
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   shr eax, 0x1f
;   mov rsp, rbp
;   pop rbp
;   ret

function %test_0_sgt_x_i64(i64) -> i8 {
block0(v0: i64):
    v1 = iconst.i64 0
    v2 = icmp sgt v1, v0
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   shr rax, rax, 0x3f
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   shr rax, 0x3f
;   mov rsp, rbp
;   pop rbp
;   ret

function %test_0_sgt_x_i32f4(i32) -> i8 {
block0(v0: i32):
    v1 = iconst.i32 0
    v2 = icmp sgt v1, v0
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   shr eax, eax, 0x1f
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   shr eax, 0x1f
;   mov rsp, rbp
;   pop rbp
;   ret

function %test_0_sle_x_i64(i64) -> i8 {
block0(v0: i64):
    v1 = iconst.i64 0
    v2 = icmp sle v1, v0
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   not rax, rax
;   shr rax, rax, 0x3f
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   not rax
;   shr rax, 0x3f
;   mov rsp, rbp
;   pop rbp
;   ret

function %test_0_sle_x_i32f4(i32) -> i8 {
block0(v0: i32):
    v1 = iconst.i32 0
    v2 = icmp sle v1, v0
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   not rax, rax
;   shr eax, eax, 0x1f
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   not rax
;   shr eax, 0x1f
;   mov rsp, rbp
;   pop rbp
;   ret

function %test_x_sge_x_i64(i64) -> i8 {
block0(v0: i64):
    v1 = iconst.i64 0
    v2 = icmp sge v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   not rax, rax
;   shr rax, rax, 0x3f
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   not rax
;   shr rax, 0x3f
;   mov rsp, rbp
;   pop rbp
;   ret

function %test_x_sge_x_i32f4(i32) -> i8 {
block0(v0: i32):
    v1 = iconst.i32 0
    v2 = icmp sge v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   not rax, rax
;   shr eax, eax, 0x1f
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   not rax
;   shr eax, 0x1f
;   mov rsp, rbp
;   pop rbp
;   ret

