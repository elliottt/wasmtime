test compile precise-output
set enable_simd
target x86_64

function %fpromote(f32) -> f64 {
block0(v0: f32):
    v1 = fpromote.f64 v0
    return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   cvtss2sd xmm0, xmm0
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   cvtss2sd xmm0, xmm0
;   mov rsp, rbp
;   pop rbp
;   ret

function %fpromote_load(i64, f32) -> f64 {
    ss0 = explicit_slot 16

block0(v1: i64, v2: f32):
    v3 = stack_addr.i64 ss0
    store.f32 v2, v3
    v4 = load.f32 v3
    v5 = fpromote.f64 v4
    return v5
}

; VCode:
;   push rbp
;   mov rbp, rsp
;   sub rsp, rsp, $16
; block0:
;   lea rdx, qword ptr [rsp]
;   movss xmmword ptr [rdx + 0x0], xmm0
;   cvtss2sd xmm0, qword ptr [rdx + 0x0]
;   add rsp, rsp, $16
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
;   sub rsp, 0x10
; block1: ; offset 0x8
;   lea rdx, [rsp]
;   movss dword ptr [rdx], xmm0 ; trap: heap_oob
;   cvtss2sd xmm0, dword ptr [rdx] ; trap: heap_oob
;   add rsp, 0x10
;   mov rsp, rbp
;   pop rbp
;   ret

function %fdemote(f64) -> f32 {
block0(v0: f64):
    v1 = fdemote.f32 v0
    return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   cvtsd2ss xmm0, xmm0
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   cvtsd2ss xmm0, xmm0
;   mov rsp, rbp
;   pop rbp
;   ret

function %fdemote_load(i64, f64) -> f32 {
    ss0 = explicit_slot 16

block0(v1: i64, v2: f64):
    v3 = stack_addr.i64 ss0
    store.f64 v2, v3
    v4 = load.f64 v3
    v5 = fdemote.f32 v4
    return v5
}

; VCode:
;   push rbp
;   mov rbp, rsp
;   sub rsp, rsp, $16
; block0:
;   lea rdx, qword ptr [rsp]
;   movsd xmmword ptr [rdx + 0x0], xmm0
;   cvtsd2ss xmm0, qword ptr [rdx + 0x0]
;   add rsp, rsp, $16
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
;   sub rsp, 0x10
; block1: ; offset 0x8
;   lea rdx, [rsp]
;   movsd qword ptr [rdx], xmm0 ; trap: heap_oob
;   cvtsd2ss xmm0, qword ptr [rdx] ; trap: heap_oob
;   add rsp, 0x10
;   mov rsp, rbp
;   pop rbp
;   ret

