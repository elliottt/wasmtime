test compile precise-output
target x86_64

function %one_arg(i32) system_v {
    ;; system_v has first param in %rdi, fascall in %rcx
    sig0 = (i32) windows_fastcall
block0(v0: i32):
    call_indirect sig0, v0(v0)
    return
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rdi
;   sub rsp, rsp, $32
;   virtual_sp_offset_adjust 32
;   call *rcx
;   add rsp, rsp, $32
;   virtual_sp_offset_adjust -32
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rdi
;   sub rsp, 0x20
;   call rcx
;   add rsp, 0x20
;   mov rsp, rbp
;   pop rbp
;   ret

function %two_args(i32, f32) system_v {
    ;; system_v has params in %rdi, %xmm0, fascall in %rcx, %xmm1
    sig0 = (i32, f32) windows_fastcall
    sig1 = (i32, f32) system_v
block0(v0: i32, v1: f32):
    call_indirect sig0, v0(v0, v1)
    call_indirect sig1, v0(v0, v1)
    return
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movdqa xmm6, xmm0
;   sub rsp, rsp, $32
;   virtual_sp_offset_adjust 32
;   mov rcx, rdi
;   movdqa xmm1, xmm6
;   call *rdi
;   add rsp, rsp, $32
;   virtual_sp_offset_adjust -32
;   movdqa xmm0, xmm6
;   call *rdi
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movdqa xmm6, xmm0
;   sub rsp, 0x20
;   mov rcx, rdi
;   movdqa xmm1, xmm6
;   call rdi
;   add rsp, 0x20
;   movdqa xmm0, xmm6
;   call rdi
;   mov rsp, rbp
;   pop rbp
;   ret

function %fastcall_to_systemv(i32) windows_fastcall {
    ;; fastcall preserves xmm6+, rbx, rbp, rdi, rsi, r12-r15
    ;; system_v preserves no xmm registers, rbx, rbp, r12-r15
    sig0 = () system_v
block0(v0: i32):
    call_indirect sig0, v0()
    return
}

; VCode:
;   push rbp
;   mov rbp, rsp
;   sub rsp, rsp, $176
;   mov qword ptr [rsp + 0x0], rsi
;   mov qword ptr [rsp + 0x8], rdi
;   movdqu xmmword ptr [rsp + 0x10], xmm6
;   movdqu xmmword ptr [rsp + 0x20], xmm7
;   movdqu xmmword ptr [rsp + 0x30], xmm8
;   movdqu xmmword ptr [rsp + 0x40], xmm9
;   movdqu xmmword ptr [rsp + 0x50], xmm10
;   movdqu xmmword ptr [rsp + 0x60], xmm11
;   movdqu xmmword ptr [rsp + 0x70], xmm12
;   movdqu xmmword ptr [rsp + 0x80], xmm13
;   movdqu xmmword ptr [rsp + 0x90], xmm14
;   movdqu xmmword ptr [rsp + 0xa0], xmm15
; block0:
;   call *rcx
;   mov rsi, qword ptr [rsp + 0x0]
;   mov rdi, qword ptr [rsp + 0x8]
;   movdqu xmm6, xmmword ptr [rsp + 0x10]
;   movdqu xmm7, xmmword ptr [rsp + 0x20]
;   movdqu xmm8, xmmword ptr [rsp + 0x30]
;   movdqu xmm9, xmmword ptr [rsp + 0x40]
;   movdqu xmm10, xmmword ptr [rsp + 0x50]
;   movdqu xmm11, xmmword ptr [rsp + 0x60]
;   movdqu xmm12, xmmword ptr [rsp + 0x70]
;   movdqu xmm13, xmmword ptr [rsp + 0x80]
;   movdqu xmm14, xmmword ptr [rsp + 0x90]
;   movdqu xmm15, xmmword ptr [rsp + 0xa0]
;   add rsp, rsp, $176
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
;   sub rsp, 0xb0
;   mov qword ptr [rsp], rsi
;   mov qword ptr [rsp + 8], rdi
;   movdqu xmmword ptr [rsp + 0x10], xmm6
;   movdqu xmmword ptr [rsp + 0x20], xmm7
;   movdqu xmmword ptr [rsp + 0x30], xmm8
;   movdqu xmmword ptr [rsp + 0x40], xmm9
;   movdqu xmmword ptr [rsp + 0x50], xmm10
;   movdqu xmmword ptr [rsp + 0x60], xmm11
;   movdqu xmmword ptr [rsp + 0x70], xmm12
;   movdqu xmmword ptr [rsp + 0x80], xmm13
;   movdqu xmmword ptr [rsp + 0x90], xmm14
;   movdqu xmmword ptr [rsp + 0xa0], xmm15
; block1: ; offset 0x61
;   call rcx
;   mov rsi, qword ptr [rsp]
;   mov rdi, qword ptr [rsp + 8]
;   movdqu xmm6, xmmword ptr [rsp + 0x10]
;   movdqu xmm7, xmmword ptr [rsp + 0x20]
;   movdqu xmm8, xmmword ptr [rsp + 0x30]
;   movdqu xmm9, xmmword ptr [rsp + 0x40]
;   movdqu xmm10, xmmword ptr [rsp + 0x50]
;   movdqu xmm11, xmmword ptr [rsp + 0x60]
;   movdqu xmm12, xmmword ptr [rsp + 0x70]
;   movdqu xmm13, xmmword ptr [rsp + 0x80]
;   movdqu xmm14, xmmword ptr [rsp + 0x90]
;   movdqu xmm15, xmmword ptr [rsp + 0xa0]
;   add rsp, 0xb0
;   mov rsp, rbp
;   pop rbp
;   ret

function %many_args(
    ;; rdi, rsi, rdx, rcx, r8, r9,
    i64, i64, i64, i64, i64, i64,

    ;; xmm0-7
    f64, f64, f64, f64, f64, f64, f64, f64,

    ;; stack args
    i64, i32, f32, f64
) system_v {
    sig0 = (
      i64, i64, i64, i64, i64, i64, f64, f64, f64, f64, f64, f64, f64, f64, i64,
      i32, f32, f64
    ) windows_fastcall
block0(
      v0: i64, v1:i64, v2:i64, v3:i64,
      v4:i64, v5:i64,
      v6: f64, v7: f64, v8:f64, v9:f64, v10:f64, v11:f64, v12:f64, v13:f64,
      v14:i64, v15:i32, v16:f32, v17:f64
):
    call_indirect sig0, v0(
      v0, v1, v2, v3,
      v4, v5, v6, v7,
      v8, v9, v10, v11,
      v12, v13, v14, v15,
      v16, v17
    )
    return
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rcx
;   mov rcx, rdx
;   mov rdx, rsi
;   mov rsi, rdi
;   mov rdi, rax
;   mov r10, qword ptr [rbp + 0x10]
;   mov r11, qword ptr [rbp + 0x18]
;   movss xmm9, qword ptr [rbp + 0x20]
;   movsd xmm8, qword ptr [rbp + 0x28]
;   sub rsp, rsp, $144
;   virtual_sp_offset_adjust 144
;   mov qword ptr [rsp + 0x20], r8
;   mov qword ptr [rsp + 0x28], r9
;   movsd xmmword ptr [rsp + 0x30], xmm0
;   movsd xmmword ptr [rsp + 0x38], xmm1
;   movsd xmmword ptr [rsp + 0x40], xmm2
;   movsd xmmword ptr [rsp + 0x48], xmm3
;   movsd xmmword ptr [rsp + 0x50], xmm4
;   movsd xmmword ptr [rsp + 0x58], xmm5
;   movsd xmmword ptr [rsp + 0x60], xmm6
;   movsd xmmword ptr [rsp + 0x68], xmm7
;   mov qword ptr [rsp + 0x70], r10
;   mov dword ptr [rsp + 0x78], r11d
;   movss xmmword ptr [rsp + 0x80], xmm9
;   movsd xmmword ptr [rsp + 0x88], xmm8
;   mov r9, rdi
;   mov r8, rcx
;   mov rcx, rsi
;   call *rcx
;   add rsp, rsp, $144
;   virtual_sp_offset_adjust -144
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rcx
;   mov rcx, rdx
;   mov rdx, rsi
;   mov rsi, rdi
;   mov rdi, rax
;   mov r10, qword ptr [rbp + 0x10]
;   mov r11, qword ptr [rbp + 0x18]
;   movss xmm9, dword ptr [rbp + 0x20]
;   movsd xmm8, qword ptr [rbp + 0x28]
;   sub rsp, 0x90
;   mov qword ptr [rsp + 0x20], r8
;   mov qword ptr [rsp + 0x28], r9
;   movsd qword ptr [rsp + 0x30], xmm0
;   movsd qword ptr [rsp + 0x38], xmm1
;   movsd qword ptr [rsp + 0x40], xmm2
;   movsd qword ptr [rsp + 0x48], xmm3
;   movsd qword ptr [rsp + 0x50], xmm4
;   movsd qword ptr [rsp + 0x58], xmm5
;   movsd qword ptr [rsp + 0x60], xmm6
;   movsd qword ptr [rsp + 0x68], xmm7
;   mov qword ptr [rsp + 0x70], r10
;   mov dword ptr [rsp + 0x78], r11d
;   movss dword ptr [rsp + 0x80], xmm9
;   movsd qword ptr [rsp + 0x88], xmm8
;   mov r9, rdi
;   mov r8, rcx
;   mov rcx, rsi
;   call rcx
;   add rsp, 0x90
;   mov rsp, rbp
;   pop rbp
;   ret

function %many_ints(i64, i64, i64, i64, i64) system_v {
    ;; rdi => rcx
    ;; rsi => rdx
    ;; rdx => r8
    ;; rcx => r9
    ;; r8 => stack
    sig0 = (i64, i64, i64, i64, i64) windows_fastcall
block0(v0: i64, v1:i64, v2:i64, v3:i64, v4:i64):
    call_indirect sig0, v0(v0, v1, v2, v3, v4)
    return
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov r11, rdx
;   mov r9, rcx
;   mov rdx, rsi
;   mov rcx, rdi
;   sub rsp, rsp, $48
;   virtual_sp_offset_adjust 48
;   mov qword ptr [rsp + 0x20], r8
;   mov r8, r11
;   call *rcx
;   add rsp, rsp, $48
;   virtual_sp_offset_adjust -48
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov r11, rdx
;   mov r9, rcx
;   mov rdx, rsi
;   mov rcx, rdi
;   sub rsp, 0x30
;   mov qword ptr [rsp + 0x20], r8
;   mov r8, r11
;   call rcx
;   add rsp, 0x30
;   mov rsp, rbp
;   pop rbp
;   ret

function %many_args2(i32, f32, i64, f64, i32, i32, i32, f32, f64, f32, f64) system_v {
    sig0 = (i32, f32, i64, f64, i32, i32, i32, f32, f64, f32, f64) windows_fastcall
block0(v0: i32, v1: f32, v2: i64, v3: f64, v4: i32, v5: i32, v6: i32, v7: f32, v8: f64, v9: f32, v10: f64):
    call_indirect sig0, v0(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10)
    return
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov r9, rsi
;   mov rsi, rdi
;   movdqa xmm12, xmm1
;   movdqa xmm1, xmm0
;   sub rsp, rsp, $96
;   virtual_sp_offset_adjust 96
;   mov dword ptr [rsp + 0x20], edx
;   mov dword ptr [rsp + 0x28], ecx
;   mov dword ptr [rsp + 0x30], r8d
;   movss xmmword ptr [rsp + 0x38], xmm2
;   movsd xmmword ptr [rsp + 0x40], xmm3
;   movss xmmword ptr [rsp + 0x48], xmm4
;   movsd xmmword ptr [rsp + 0x50], xmm5
;   mov rcx, rsi
;   mov r8, r9
;   movdqa xmm3, xmm12
;   call *rcx
;   add rsp, rsp, $96
;   virtual_sp_offset_adjust -96
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov r9, rsi
;   mov rsi, rdi
;   movdqa xmm12, xmm1
;   movdqa xmm1, xmm0
;   sub rsp, 0x60
;   mov dword ptr [rsp + 0x20], edx
;   mov dword ptr [rsp + 0x28], ecx
;   mov dword ptr [rsp + 0x30], r8d
;   movss dword ptr [rsp + 0x38], xmm2
;   movsd qword ptr [rsp + 0x40], xmm3
;   movss dword ptr [rsp + 0x48], xmm4
;   movsd qword ptr [rsp + 0x50], xmm5
;   mov rcx, rsi
;   mov r8, r9
;   movdqa xmm3, xmm12
;   call rcx
;   add rsp, 0x60
;   mov rsp, rbp
;   pop rbp
;   ret

function %wasmtime_mix1(i32) wasmtime_system_v {
    sig0 = (i32) system_v
block0(v0: i32):
    call_indirect sig0, v0(v0)
    return
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   call *rdi
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   call rdi
;   mov rsp, rbp
;   pop rbp
;   ret

function %wasmtime_mix2(i32) system_v {
    sig0 = (i32) wasmtime_system_v
block0(v0: i32):
    call_indirect sig0, v0(v0)
    return
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   call *rdi
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   call rdi
;   mov rsp, rbp
;   pop rbp
;   ret

function %wasmtime_mix2() -> i32, i32 system_v {
    sig0 = () -> i32, i32 wasmtime_system_v
block0:
    v2 = iconst.i32 1
    v0, v1 = call_indirect sig0, v2()
    return v0, v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov ecx, 0x1
;   sub rsp, rsp, $16
;   virtual_sp_offset_adjust 16
;   lea rdi, qword ptr [rsp + 0x0]
;   call *rcx
;   mov rdx, qword ptr [rsp + 0x0]
;   add rsp, rsp, $16
;   virtual_sp_offset_adjust -16
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov ecx, 1
;   sub rsp, 0x10
;   lea rdi, [rsp]
;   call rcx
;   mov rdx, qword ptr [rsp]
;   add rsp, 0x10
;   mov rsp, rbp
;   pop rbp
;   ret

function %wasmtime_mix3() -> i32, i32 wasmtime_system_v {
    sig0 = () -> i32, i32 system_v
block0:
    v2 = iconst.i32 1
    v0, v1 = call_indirect sig0, v2()
    return v0, v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
;   sub rsp, rsp, $16
;   mov qword ptr [rsp + 0x0], rbx
; block0:
;   mov rbx, rdi
;   mov edx, 0x1
;   call *rdx
;   mov rdi, rbx
;   mov dword ptr [rdi + 0x0], edx
;   mov rbx, qword ptr [rsp + 0x0]
;   add rsp, rsp, $16
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
;   sub rsp, 0x10
;   mov qword ptr [rsp], rbx
; block1: ; offset 0xc
;   mov rbx, rdi
;   mov edx, 1
;   call rdx
;   mov rdi, rbx
;   mov dword ptr [rdi], edx
;   mov rbx, qword ptr [rsp]
;   add rsp, 0x10
;   mov rsp, rbp
;   pop rbp
;   ret

function %wasmtime_mix4() -> i32, i64, i32 wasmtime_system_v {
    sig0 = () -> i32, i64, i32 system_v
block0:
    v3 = iconst.i32 1
    v0, v1, v2 = call_indirect sig0, v3()
    return v0, v1, v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
;   sub rsp, rsp, $16
;   mov qword ptr [rsp + 0x0], r13
; block0:
;   mov r13, rdi
;   mov r9d, 0x1
;   sub rsp, rsp, $16
;   virtual_sp_offset_adjust 16
;   lea rdi, qword ptr [rsp + 0x0]
;   call *r9
;   mov rsi, qword ptr [rsp + 0x0]
;   add rsp, rsp, $16
;   virtual_sp_offset_adjust -16
;   mov rdi, r13
;   mov qword ptr [rdi + 0x0], rdx
;   mov dword ptr [rdi + 0x8], esi
;   mov r13, qword ptr [rsp + 0x0]
;   add rsp, rsp, $16
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
;   sub rsp, 0x10
;   mov qword ptr [rsp], r13
; block1: ; offset 0xc
;   mov r13, rdi
;   mov r9d, 1
;   sub rsp, 0x10
;   lea rdi, [rsp]
;   call r9
;   mov rsi, qword ptr [rsp]
;   add rsp, 0x10
;   mov rdi, r13
;   mov qword ptr [rdi], rdx
;   mov dword ptr [rdi + 8], esi
;   mov r13, qword ptr [rsp]
;   add rsp, 0x10
;   mov rsp, rbp
;   pop rbp
;   ret

function %wasmtime_mix5() -> f32, i64, i32, f32 wasmtime_system_v {
    sig0 = () -> f32, i64, i32, f32 system_v
block0:
    v5 = iconst.i32 1
    v0, v1, v2, v3 = call_indirect sig0, v5()
    return v0, v1, v2, v3
}

; VCode:
;   push rbp
;   mov rbp, rsp
;   sub rsp, rsp, $16
;   mov qword ptr [rsp + 0x0], r13
; block0:
;   mov r13, rdi
;   mov r9d, 0x1
;   call *r9
;   mov rdi, r13
;   mov qword ptr [rdi + 0x0], rax
;   mov dword ptr [rdi + 0x8], edx
;   movss xmmword ptr [rdi + 0xc], xmm1
;   mov r13, qword ptr [rsp + 0x0]
;   add rsp, rsp, $16
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
;   sub rsp, 0x10
;   mov qword ptr [rsp], r13
; block1: ; offset 0xc
;   mov r13, rdi
;   mov r9d, 1
;   call r9
;   mov rdi, r13
;   mov qword ptr [rdi], rax
;   mov dword ptr [rdi + 8], edx
;   movss dword ptr [rdi + 0xc], xmm1
;   mov r13, qword ptr [rsp]
;   add rsp, 0x10
;   mov rsp, rbp
;   pop rbp
;   ret

function %wasmtime_mix6(f32, i64, i32, f32) -> f32, i64, i32, f32 wasmtime_system_v {
    sig0 = (f32, i64, i32, f32) -> f32, i64, i32, f32 system_v
block0(v0: f32, v1: i64, v2: i32, v3: f32):
    v4 = iconst.i32 1
    v5, v6, v7, v8 = call_indirect sig0, v4(v0, v1, v2, v3)
    return v5, v6, v7, v8
}

; VCode:
;   push rbp
;   mov rbp, rsp
;   sub rsp, rsp, $16
;   mov qword ptr [rsp + 0x0], r12
; block0:
;   mov r12, rdx
;   mov eax, 0x1
;   call *rax
;   mov r8, r12
;   mov qword ptr [r8 + 0x0], rax
;   mov dword ptr [r8 + 0x8], edx
;   movss xmmword ptr [r8 + 0xc], xmm1
;   mov r12, qword ptr [rsp + 0x0]
;   add rsp, rsp, $16
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
;   sub rsp, 0x10
;   mov qword ptr [rsp], r12
; block1: ; offset 0xc
;   mov r12, rdx
;   mov eax, 1
;   call rax
;   mov r8, r12
;   mov qword ptr [r8], rax
;   mov dword ptr [r8 + 8], edx
;   movss dword ptr [r8 + 0xc], xmm1
;   mov r12, qword ptr [rsp]
;   add rsp, 0x10
;   mov rsp, rbp
;   pop rbp
;   ret

