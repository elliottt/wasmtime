test compile precise-output
set enable_simd
target x86_64 sse42 has_avx

function %i8x16_eq(i8x16, i8x16) -> i8x16 {
block0(v0: i8x16, v1: i8x16):
  v2 = icmp eq v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpcmpeqb xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpcmpeqb xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret

function %i16x8_eq(i16x8, i16x8) -> i16x8 {
block0(v0: i16x8, v1: i16x8):
  v2 = icmp eq v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpcmpeqw xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpcmpeqw xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret

function %i32x4_eq(i32x4, i32x4) -> i32x4 {
block0(v0: i32x4, v1: i32x4):
  v2 = icmp eq v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpcmpeqd xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpcmpeqd xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret

function %i64x2_eq(i64x2, i64x2) -> i64x2 {
block0(v0: i64x2, v1: i64x2):
  v2 = icmp eq v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpcmpeqq xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpcmpeqq xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret

function %i8x16_gt(i8x16, i8x16) -> i8x16 {
block0(v0: i8x16, v1: i8x16):
  v2 = icmp sgt v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpcmpgtb xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpcmpgtb xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret

function %i16x8_gt(i16x8, i16x8) -> i16x8 {
block0(v0: i16x8, v1: i16x8):
  v2 = icmp sgt v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpcmpgtw xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpcmpgtw xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret

function %i32x4_gt(i32x4, i32x4) -> i32x4 {
block0(v0: i32x4, v1: i32x4):
  v2 = icmp sgt v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpcmpgtd xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpcmpgtd xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret

function %i64x2_gt(i64x2, i64x2) -> i64x2 {
block0(v0: i64x2, v1: i64x2):
  v2 = icmp sgt v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpcmpgtq xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpcmpgtq xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret

function %f32x4_min(f32x4, f32x4) -> f32x4 {
block0(v0: f32x4, v1: f32x4):
  v2 = fmin v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vminps xmm3, xmm0, xmm1
;   vminps xmm5, xmm1, xmm0
;   vorps xmm7, xmm3, xmm5
;   vcmpps xmm9, xmm7, xmm5, 0x3
;   vorps xmm11, xmm7, xmm9
;   vpsrld xmm13, xmm9, $10
;   vandnps xmm0, xmm13, xmm11
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vminps xmm3, xmm0, xmm1
;   vminps xmm5, xmm1, xmm0
;   vorps xmm7, xmm3, xmm5
;   vcmpunordps xmm9, xmm7, xmm5
;   vorps xmm11, xmm7, xmm9
;   vpsrld xmm13, xmm9, 0xa
;   vandnps xmm0, xmm13, xmm11
;   mov rsp, rbp
;   pop rbp
;   ret

function %f64x2_min(f64x2, f64x2) -> f64x2 {
block0(v0: f64x2, v1: f64x2):
  v2 = fmin v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vminpd xmm3, xmm0, xmm1
;   vminpd xmm5, xmm1, xmm0
;   vorpd xmm7, xmm3, xmm5
;   vcmppd xmm9, xmm3, xmm5, 0x3
;   vorpd xmm11, xmm7, xmm9
;   vpsrlq xmm13, xmm9, $13
;   vandnpd xmm0, xmm13, xmm11
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vminpd xmm3, xmm0, xmm1
;   vminpd xmm5, xmm1, xmm0
;   vorpd xmm7, xmm3, xmm5
;   vcmpunordpd xmm9, xmm3, xmm5
;   vorpd xmm11, xmm7, xmm9
;   vpsrlq xmm13, xmm9, 0xd
;   vandnpd xmm0, xmm13, xmm11
;   mov rsp, rbp
;   pop rbp
;   ret

function %f32x4_max(f32x4, f32x4) -> f32x4 {
block0(v0: f32x4, v1: f32x4):
  v2 = fmax v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vmaxps xmm3, xmm0, xmm1
;   vmaxps xmm5, xmm1, xmm0
;   vxorps xmm7, xmm3, xmm5
;   vorps xmm9, xmm3, xmm7
;   vsubps xmm11, xmm9, xmm7
;   vcmpps xmm13, xmm9, xmm9, 0x3
;   vpsrld xmm15, xmm13, $10
;   vandnps xmm0, xmm15, xmm11
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vmaxps xmm3, xmm0, xmm1
;   vmaxps xmm5, xmm1, xmm0
;   vxorps xmm7, xmm3, xmm5
;   vorps xmm9, xmm3, xmm7
;   vsubps xmm11, xmm9, xmm7
;   vcmpunordps xmm13, xmm9, xmm9
;   vpsrld xmm15, xmm13, 0xa
;   vandnps xmm0, xmm15, xmm11
;   mov rsp, rbp
;   pop rbp
;   ret

function %f64x2_max(f64x2, f64x2) -> f64x2 {
block0(v0: f64x2, v1: f64x2):
  v2 = fmax v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vmaxpd xmm3, xmm0, xmm1
;   vmaxpd xmm5, xmm1, xmm0
;   vxorpd xmm7, xmm3, xmm5
;   vorpd xmm9, xmm3, xmm7
;   vsubpd xmm11, xmm9, xmm7
;   vcmppd xmm13, xmm9, xmm9, 0x3
;   vpsrlq xmm15, xmm13, $13
;   vandnpd xmm0, xmm15, xmm11
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vmaxpd xmm3, xmm0, xmm1
;   vmaxpd xmm5, xmm1, xmm0
;   vxorpd xmm7, xmm3, xmm5
;   vorpd xmm9, xmm3, xmm7
;   vsubpd xmm11, xmm9, xmm7
;   vcmpunordpd xmm13, xmm9, xmm9
;   vpsrlq xmm15, xmm13, 0xd
;   vandnpd xmm0, xmm15, xmm11
;   mov rsp, rbp
;   pop rbp
;   ret

function %i8x16_min(i8x16, i8x16) -> i8x16 {
block0(v0: i8x16, v1: i8x16):
  v2 = smin v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpminsb xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpminsb xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret

function %u8x16_min(i8x16, i8x16) -> i8x16 {
block0(v0: i8x16, v1: i8x16):
  v2 = umin v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpminub xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpminub xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret

function %i16x8_min(i16x8, i16x8) -> i16x8 {
block0(v0: i16x8, v1: i16x8):
  v2 = smin v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpminsw xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpminsw xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret

function %u16x8_min(i16x8, i16x8) -> i16x8 {
block0(v0: i16x8, v1: i16x8):
  v2 = umin v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpminuw xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpminuw xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret

function %i32x4_min(i32x4, i32x4) -> i32x4 {
block0(v0: i32x4, v1: i32x4):
  v2 = smin v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpminsd xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpminsd xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret

function %u32x4_min(i32x4, i32x4) -> i32x4 {
block0(v0: i32x4, v1: i32x4):
  v2 = umin v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpminud xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpminud xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret

function %i8x16_max(i8x16, i8x16) -> i8x16 {
block0(v0: i8x16, v1: i8x16):
  v2 = smax v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpmaxsb xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpmaxsb xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret

function %u8x16_max(i8x16, i8x16) -> i8x16 {
block0(v0: i8x16, v1: i8x16):
  v2 = umax v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpmaxub xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpmaxub xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret

function %i16x8_max(i16x8, i16x8) -> i16x8 {
block0(v0: i16x8, v1: i16x8):
  v2 = smax v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpmaxsw xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpmaxsw xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret

function %u16x8_max(i16x8, i16x8) -> i16x8 {
block0(v0: i16x8, v1: i16x8):
  v2 = umax v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpmaxuw xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpmaxuw xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret

function %i32x4_max(i32x4, i32x4) -> i32x4 {
block0(v0: i32x4, v1: i32x4):
  v2 = smax v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpmaxsd xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpmaxsd xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret

function %u32x4_max(i32x4, i32x4) -> i32x4 {
block0(v0: i32x4, v1: i32x4):
  v2 = umax v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   vpmaxud xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   vpmaxud xmm0, xmm0, xmm1
;   mov rsp, rbp
;   pop rbp
;   ret

