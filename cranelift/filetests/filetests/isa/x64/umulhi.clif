test compile precise-output
target x86_64

function %f1(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
  v2 = umulhi v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   mul ax, dx, ax, si
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   mul si
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret

function %f2(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
  v2 = umulhi v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   mul eax, edx, eax, esi
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   mul esi
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret

function %f3(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
  v2 = umulhi v0, v1
  return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   mul rax, rdx, rax, rsi
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   mul rsi
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret

