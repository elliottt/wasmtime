test compile precise-output
target x86_64

function %f0(i64 sret) {
block0(v0: i64):
    v1 = iconst.i64 42
    store v1, v0
    return
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov eax, 0x2a
;   mov qword ptr [rdi + 0x0], rax
;   mov rax, rdi
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov eax, 0x2a
;   mov qword ptr [rdi], rax ; trap: heap_oob
;   mov rax, rdi
;   mov rsp, rbp
;   pop rbp
;   ret

function %f1(i64, i64) -> i64 {
    fn0 = %f2(i64 sret) -> i64

block0(v0: i64, v1: i64):
    v2 = call fn0(v1)
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rdi, rsi
;   load_ext_name rdx, %f2+0
;   call *rdx
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rdi, rsi
;   movabs rdx, 0 ; reloc_external Abs8 %f2 0
;   call rdx
;   mov rax, rdx
;   mov rsp, rbp
;   pop rbp
;   ret

function %f3(i64 sret) {
    fn0 = %f4(i64 sret)

block0(v0: i64):
    call fn0(v0)
    return
}

; VCode:
;   push rbp
;   mov rbp, rsp
;   sub rsp, rsp, $16
;   mov qword ptr [rsp + 0x0], r15
; block0:
;   mov r15, rdi
;   load_ext_name rax, %f4+0
;   mov rdi, r15
;   call *rax
;   mov rax, r15
;   mov r15, qword ptr [rsp + 0x0]
;   add rsp, rsp, $16
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
;   sub rsp, 0x10
;   mov qword ptr [rsp], r15
; block1: ; offset 0xc
;   mov r15, rdi
;   movabs rax, 0 ; reloc_external Abs8 %f4 0
;   mov rdi, r15
;   call rax
;   mov rax, r15
;   mov r15, qword ptr [rsp]
;   add rsp, 0x10
;   mov rsp, rbp
;   pop rbp
;   ret

