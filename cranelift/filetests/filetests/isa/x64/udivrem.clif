test compile precise-output
target x86_64

; Ideally these pairs of CLIF instructions should emit a single x86 instruction.

function %udivrem_i8(i8, i8) -> i8, i8 {
block0(v0: i8, v1: i8):
  v2 = udiv v0, v1
  v3 = urem v0, v1
  return v2, v3
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movzx eax, dil
;   div al, sil, al ; trap=int_divz
;   mov r11, rax
;   movzx eax, dil
;   div al, sil, al ; trap=int_divz
;   mov rdx, rax
;   shr rdx, rdx, 0x8
;   mov rax, r11
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movzx eax, dil
;   div sil ; trap: int_divz
;   mov r11, rax
;   movzx eax, dil
;   div sil ; trap: int_divz
;   mov rdx, rax
;   shr rdx, 8
;   mov rax, r11
;   mov rsp, rbp
;   pop rbp
;   ret

function %udivrem_i16(i16, i16) -> i16, i16 {
block0(v0: i16, v1: i16):
  v2 = udiv v0, v1
  v3 = urem v0, v1
  return v2, v3
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   xor rdx, rdx, rdx
;   mov rax, rdi
;   div ax, dx, ax, dx, si ; trap=int_divz
;   mov rcx, rax
;   mov rax, rdi
;   xor rdx, rdx, rdx
;   div ax, dx, ax, dx, si ; trap=int_divz
;   mov rax, rcx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   xor rdx, rdx
;   mov rax, rdi
;   div si ; trap: int_divz
;   mov rcx, rax
;   mov rax, rdi
;   xor rdx, rdx
;   div si ; trap: int_divz
;   mov rax, rcx
;   mov rsp, rbp
;   pop rbp
;   ret

function %udivrem_i32(i32, i32) -> i32, i32 {
block0(v0: i32, v1: i32):
  v2 = udiv v0, v1
  v3 = urem v0, v1
  return v2, v3
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   xor rdx, rdx, rdx
;   mov rax, rdi
;   div eax, edx, eax, edx, esi ; trap=int_divz
;   mov rcx, rax
;   mov rax, rdi
;   xor rdx, rdx, rdx
;   div eax, edx, eax, edx, esi ; trap=int_divz
;   mov rax, rcx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   xor rdx, rdx
;   mov rax, rdi
;   div esi ; trap: int_divz
;   mov rcx, rax
;   mov rax, rdi
;   xor rdx, rdx
;   div esi ; trap: int_divz
;   mov rax, rcx
;   mov rsp, rbp
;   pop rbp
;   ret

function %udivrem_i64(i64, i64) -> i64, i64 {
block0(v0: i64, v1: i64):
  v2 = udiv v0, v1
  v3 = urem v0, v1
  return v2, v3
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   xor rdx, rdx, rdx
;   mov rax, rdi
;   div rax, rdx, rax, rdx, rsi ; trap=int_divz
;   mov rcx, rax
;   mov rax, rdi
;   xor rdx, rdx, rdx
;   div rax, rdx, rax, rdx, rsi ; trap=int_divz
;   mov rax, rcx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   xor rdx, rdx
;   mov rax, rdi
;   div rsi ; trap: int_divz
;   mov rcx, rax
;   mov rax, rdi
;   xor rdx, rdx
;   div rsi ; trap: int_divz
;   mov rax, rcx
;   mov rsp, rbp
;   pop rbp
;   ret

