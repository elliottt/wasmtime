test compile precise-output
set enable_llvm_abi_extensions=true
target x86_64

function %f0(i32, i128, i128) -> i128 {
block0(v0: i32, v1: i128, v2: i128):
    v3 = iconst.i32 42
    v4 = icmp.i32 eq v0, v3
    v5 = select.i128 v4, v1, v2
    return v5
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   cmp edi, $42
;   mov rax, rcx
;   cmovz rax, rsi, rax
;   mov rdi, rdx
;   mov rdx, r8
;   cmovz rdx, rdi, rdx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   cmp edi, 0x2a
;   mov rax, rcx
;   cmove rax, rsi
;   mov rdi, rdx
;   mov rdx, r8
;   cmove rdx, rdi
;   mov rsp, rbp
;   pop rbp
;   ret

function %f1(f32, i128, i128) -> i128 {
block0(v0: f32, v1: i128, v2: i128):
    v3 = fcmp.f32 eq v0, v0
    v4 = select.i128 v3, v1, v2
    return v4
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   ucomiss xmm0, xmm0
;   mov rax, rdi
;   cmovp rax, rdx, rax
;   cmovnz rax, rdx, rax
;   mov rdx, rsi
;   cmovp rdx, rcx, rdx
;   cmovnz rdx, rcx, rdx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   ucomiss xmm0, xmm0
;   mov rax, rdi
;   cmovp rax, rdx
;   cmovne rax, rdx
;   mov rdx, rsi
;   cmovp rdx, rcx
;   cmovne rdx, rcx
;   mov rsp, rbp
;   pop rbp
;   ret

