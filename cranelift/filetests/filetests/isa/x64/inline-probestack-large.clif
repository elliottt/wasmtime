test compile precise-output
set enable_probestack=true
; Test with the larger size of 64k
set probestack_size_log2=16
set probestack_strategy=inline
target x86_64



; If the stack size is just one page, we can avoid the stack probe entirely
function %single_page() -> i64 system_v {
ss0 = explicit_slot 8192

block0:
  v1 = stack_addr.i64 ss0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
;   sub rsp, rsp, $8192
; block0:
;   lea rax, qword ptr [rsp]
;   add rsp, rsp, $8192
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
;   sub rsp, 0x2000
; block1: ; offset 0xb
;   lea rax, [rsp]
;   add rsp, 0x2000
;   mov rsp, rbp
;   pop rbp
;   ret

function %unrolled() -> i64 system_v {
ss0 = explicit_slot 196608

block0:
  v1 = stack_addr.i64 ss0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
;   mov dword ptr [rsp - 0x10000], esp
;   mov dword ptr [rsp - 0x20000], esp
;   mov dword ptr [rsp - 0x30000], esp
;   sub rsp, rsp, $196608
; block0:
;   lea rax, qword ptr [rsp]
;   add rsp, rsp, $196608
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
;   mov dword ptr [rsp - 0x10000], esp
;   mov dword ptr [rsp - 0x20000], esp
;   mov dword ptr [rsp - 0x30000], esp
;   sub rsp, 0x30000
; block1: ; offset 0x20
;   lea rax, [rsp]
;   add rsp, 0x30000
;   mov rsp, rbp
;   pop rbp
;   ret

function %large() -> i64 system_v {
ss0 = explicit_slot 2097152

block0:
  v1 = stack_addr.i64 ss0
  return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
;   stack_probe_loop r11, frame_size=2097152, guard_size=65536
;   sub rsp, rsp, $2097152
; block0:
;   lea rax, qword ptr [rsp]
;   add rsp, rsp, $2097152
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
;   mov r11, rsp
;   sub r11, 0x200000
;   sub rsp, 0x10000
;   mov dword ptr [rsp], esp
;   cmp r11, rsp
;   jne 0xe
;   add rsp, 0x200000
;   sub rsp, 0x200000
; block1: ; offset 0x2f
;   lea rax, [rsp]
;   add rsp, 0x200000
;   mov rsp, rbp
;   pop rbp
;   ret

