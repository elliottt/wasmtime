test compile precise-output
target x86_64

function %popcnt64(i64) -> i64 {
block0(v0: i64):
    v1 = popcnt v0
    return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rdi
;   shr rdi, rdi, 0x1
;   mov r8, rcx
;   movabs rdx, 0x7777777777777777
;   and rdi, rdi, rdx
;   sub r8, r8, rdi
;   shr rdi, rdi, 0x1
;   and rdi, rdi, rdx
;   sub r8, r8, rdi
;   shr rdi, rdi, 0x1
;   and rdi, rdi, rdx
;   sub r8, r8, rdi
;   mov rax, r8
;   shr rax, rax, 0x4
;   add rax, rax, r8
;   movabs r11, 0xf0f0f0f0f0f0f0f
;   and rax, rax, r11
;   movabs rcx, 0x101010101010101
;   imul rax, rax, rcx
;   shr rax, rax, 0x38
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rdi
;   shr rdi, 1
;   mov r8, rcx
;   movabs rdx, 0x7777777777777777
;   and rdi, rdx
;   sub r8, rdi
;   shr rdi, 1
;   and rdi, rdx
;   sub r8, rdi
;   shr rdi, 1
;   and rdi, rdx
;   sub r8, rdi
;   mov rax, r8
;   shr rax, 4
;   add rax, r8
;   movabs r11, 0xf0f0f0f0f0f0f0f
;   and rax, r11
;   movabs rcx, 0x101010101010101
;   imul rax, rcx
;   shr rax, 0x38
;   mov rsp, rbp
;   pop rbp
;   ret

function %popcnt64load(i64) -> i64 {
block0(v0: i64):
    v1 = load.i64 v0
    v2 = popcnt v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rdx, qword ptr [rdi + 0x0]
;   mov rcx, rdx
;   shr rcx, rcx, 0x1
;   movabs r8, 0x7777777777777777
;   and rcx, rcx, r8
;   sub rdx, rdx, rcx
;   shr rcx, rcx, 0x1
;   and rcx, rcx, r8
;   sub rdx, rdx, rcx
;   shr rcx, rcx, 0x1
;   and rcx, rcx, r8
;   sub rdx, rdx, rcx
;   mov rax, rdx
;   shr rax, rax, 0x4
;   add rax, rax, rdx
;   movabs rsi, 0xf0f0f0f0f0f0f0f
;   and rax, rax, rsi
;   movabs rdx, 0x101010101010101
;   imul rax, rax, rdx
;   shr rax, rax, 0x38
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rdx, qword ptr [rdi] ; trap: heap_oob
;   mov rcx, rdx
;   shr rcx, 1
;   movabs r8, 0x7777777777777777
;   and rcx, r8
;   sub rdx, rcx
;   shr rcx, 1
;   and rcx, r8
;   sub rdx, rcx
;   shr rcx, 1
;   and rcx, r8
;   sub rdx, rcx
;   mov rax, rdx
;   shr rax, 4
;   add rax, rdx
;   movabs rsi, 0xf0f0f0f0f0f0f0f
;   and rax, rsi
;   movabs rdx, 0x101010101010101
;   imul rax, rdx
;   shr rax, 0x38
;   mov rsp, rbp
;   pop rbp
;   ret

function %popcnt32(i32) -> i32 {
block0(v0: i32):
    v1 = popcnt v0
    return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   shr edi, edi, 0x1
;   mov edx, 0x77777777
;   and edi, edi, edx
;   mov r8, rax
;   sub r8d, r8d, edi
;   shr edi, edi, 0x1
;   and edi, edi, edx
;   sub r8d, r8d, edi
;   shr edi, edi, 0x1
;   and edi, edi, edx
;   sub r8d, r8d, edi
;   mov rax, r8
;   shr eax, eax, 0x4
;   add eax, eax, r8d
;   and eax, eax, $252645135
;   imul eax, eax, $16843009
;   shr eax, eax, 0x18
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   shr edi, 1
;   mov edx, 0x77777777
;   and edi, edx
;   mov r8, rax
;   sub r8d, edi
;   shr edi, 1
;   and edi, edx
;   sub r8d, edi
;   shr edi, 1
;   and edi, edx
;   sub r8d, edi
;   mov rax, r8
;   shr eax, 4
;   add eax, r8d
;   and eax, 0xf0f0f0f
;   imul eax, eax, 0x1010101
;   shr eax, 0x18
;   mov rsp, rbp
;   pop rbp
;   ret

function %popcnt32load(i64) -> i32 {
block0(v0: i64):
    v1 = load.i32 v0
    v2 = popcnt v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov edx, dword ptr [rdi + 0x0]
;   mov rcx, rdx
;   shr ecx, ecx, 0x1
;   mov r8d, 0x77777777
;   and ecx, ecx, r8d
;   sub edx, edx, ecx
;   shr ecx, ecx, 0x1
;   and ecx, ecx, r8d
;   sub edx, edx, ecx
;   shr ecx, ecx, 0x1
;   and ecx, ecx, r8d
;   sub edx, edx, ecx
;   mov rax, rdx
;   shr eax, eax, 0x4
;   add eax, eax, edx
;   and eax, eax, $252645135
;   imul eax, eax, $16843009
;   shr eax, eax, 0x18
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov edx, dword ptr [rdi] ; trap: heap_oob
;   mov rcx, rdx
;   shr ecx, 1
;   mov r8d, 0x77777777
;   and ecx, r8d
;   sub edx, ecx
;   shr ecx, 1
;   and ecx, r8d
;   sub edx, ecx
;   shr ecx, 1
;   and ecx, r8d
;   sub edx, ecx
;   mov rax, rdx
;   shr eax, 4
;   add eax, edx
;   and eax, 0xf0f0f0f
;   imul eax, eax, 0x1010101
;   shr eax, 0x18
;   mov rsp, rbp
;   pop rbp
;   ret

