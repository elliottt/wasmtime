test compile precise-output
set enable_llvm_abi_extensions=true
target x86_64


function %ushr_i128_i128(i128, i8) -> i128 {
block0(v0: i128, v1: i8):
    v2 = uextend.i64 v1
    v3 = iconcat v2, v2

    v4 = ushr.i128 v0, v3
    return v4
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   movzx rcx, dl
;   mov r8, rdi
;   shr r8, r8, cl
;   mov r10, rsi
;   shr r10, r10, cl
;   mov r9, rcx
;   mov ecx, 0x40
;   mov rdi, r9
;   sub rcx, rcx, rdi
;   mov r11, rsi
;   shl r11, r11, cl
;   xor rdx, rdx, rdx
;   test rdi, $127
;   cmovz r11, rdx, r11
;   or r11, r11, r8
;   test rdi, $64
;   mov rax, r10
;   cmovz rax, r11, rax
;   cmovz rdx, r10, rdx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   movzx rcx, dl
;   mov r8, rdi
;   shr r8, cl
;   mov r10, rsi
;   shr r10, cl
;   mov r9, rcx
;   mov ecx, 0x40
;   mov rdi, r9
;   sub rcx, rdi
;   mov r11, rsi
;   shl r11, cl
;   xor rdx, rdx
;   test rdi, 0x7f
;   cmove r11, rdx
;   or r11, r8
;   test rdi, 0x40
;   mov rax, r10
;   cmove rax, r11
;   cmove rdx, r10
;   mov rsp, rbp
;   pop rbp
;   ret

function %ushr_i128_i64(i128, i64) -> i128 {
block0(v0: i128, v1: i64):
    v2 = ushr.i128 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rdx
;   mov r10, rdx
;   mov r8, rdi
;   shr r8, r8, cl
;   mov r9, rsi
;   shr r9, r9, cl
;   mov r10, rcx
;   mov ecx, 0x40
;   mov rdi, r10
;   sub rcx, rcx, rdi
;   mov r10, rsi
;   shl r10, r10, cl
;   xor rdx, rdx, rdx
;   test rdi, $127
;   cmovz r10, rdx, r10
;   or r10, r10, r8
;   test rdi, $64
;   mov rax, r9
;   cmovz rax, r10, rax
;   cmovz rdx, r9, rdx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rdx
;   mov r10, rdx
;   mov r8, rdi
;   shr r8, cl
;   mov r9, rsi
;   shr r9, cl
;   mov r10, rcx
;   mov ecx, 0x40
;   mov rdi, r10
;   sub rcx, rdi
;   mov r10, rsi
;   shl r10, cl
;   xor rdx, rdx
;   test rdi, 0x7f
;   cmove r10, rdx
;   or r10, r8
;   test rdi, 0x40
;   mov rax, r9
;   cmove rax, r10
;   cmove rdx, r9
;   mov rsp, rbp
;   pop rbp
;   ret

function %ushr_i128_i32(i128, i32) -> i128 {
block0(v0: i128, v1: i32):
    v2 = ushr.i128 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rdx
;   mov r10, rdx
;   mov r8, rdi
;   shr r8, r8, cl
;   mov r9, rsi
;   shr r9, r9, cl
;   mov r10, rcx
;   mov ecx, 0x40
;   mov rdi, r10
;   sub rcx, rcx, rdi
;   mov r10, rsi
;   shl r10, r10, cl
;   xor rdx, rdx, rdx
;   test rdi, $127
;   cmovz r10, rdx, r10
;   or r10, r10, r8
;   test rdi, $64
;   mov rax, r9
;   cmovz rax, r10, rax
;   cmovz rdx, r9, rdx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rdx
;   mov r10, rdx
;   mov r8, rdi
;   shr r8, cl
;   mov r9, rsi
;   shr r9, cl
;   mov r10, rcx
;   mov ecx, 0x40
;   mov rdi, r10
;   sub rcx, rdi
;   mov r10, rsi
;   shl r10, cl
;   xor rdx, rdx
;   test rdi, 0x7f
;   cmove r10, rdx
;   or r10, r8
;   test rdi, 0x40
;   mov rax, r9
;   cmove rax, r10
;   cmove rdx, r9
;   mov rsp, rbp
;   pop rbp
;   ret

function %ushr_i128_i16(i128, i16) -> i128 {
block0(v0: i128, v1: i16):
    v2 = ushr.i128 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rdx
;   mov r10, rdx
;   mov r8, rdi
;   shr r8, r8, cl
;   mov r9, rsi
;   shr r9, r9, cl
;   mov r10, rcx
;   mov ecx, 0x40
;   mov rdi, r10
;   sub rcx, rcx, rdi
;   mov r10, rsi
;   shl r10, r10, cl
;   xor rdx, rdx, rdx
;   test rdi, $127
;   cmovz r10, rdx, r10
;   or r10, r10, r8
;   test rdi, $64
;   mov rax, r9
;   cmovz rax, r10, rax
;   cmovz rdx, r9, rdx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rdx
;   mov r10, rdx
;   mov r8, rdi
;   shr r8, cl
;   mov r9, rsi
;   shr r9, cl
;   mov r10, rcx
;   mov ecx, 0x40
;   mov rdi, r10
;   sub rcx, rdi
;   mov r10, rsi
;   shl r10, cl
;   xor rdx, rdx
;   test rdi, 0x7f
;   cmove r10, rdx
;   or r10, r8
;   test rdi, 0x40
;   mov rax, r9
;   cmove rax, r10
;   cmove rdx, r9
;   mov rsp, rbp
;   pop rbp
;   ret

function %ushr_i128_i8(i128, i8) -> i128 {
block0(v0: i128, v1: i8):
    v2 = ushr.i128 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rdx
;   mov r10, rdx
;   mov r8, rdi
;   shr r8, r8, cl
;   mov r9, rsi
;   shr r9, r9, cl
;   mov r10, rcx
;   mov ecx, 0x40
;   mov rdi, r10
;   sub rcx, rcx, rdi
;   mov r10, rsi
;   shl r10, r10, cl
;   xor rdx, rdx, rdx
;   test rdi, $127
;   cmovz r10, rdx, r10
;   or r10, r10, r8
;   test rdi, $64
;   mov rax, r9
;   cmovz rax, r10, rax
;   cmovz rdx, r9, rdx
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rdx
;   mov r10, rdx
;   mov r8, rdi
;   shr r8, cl
;   mov r9, rsi
;   shr r9, cl
;   mov r10, rcx
;   mov ecx, 0x40
;   mov rdi, r10
;   sub rcx, rdi
;   mov r10, rsi
;   shl r10, cl
;   xor rdx, rdx
;   test rdi, 0x7f
;   cmove r10, rdx
;   or r10, r8
;   test rdi, 0x40
;   mov rax, r9
;   cmove rax, r10
;   cmove rdx, r9
;   mov rsp, rbp
;   pop rbp
;   ret

function %ushr_i64_i128(i64, i128) -> i64 {
block0(v0: i64, v1: i128):
    v2 = ushr.i64 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   mov rax, rdi
;   shr rax, rax, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   mov rax, rdi
;   shr rax, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ushr_i32_i128(i32, i64, i64) -> i32 {
block0(v0: i32, v1: i64, v2: i64):
    v3 = iconcat v1, v2
    v4 = ushr.i32 v0, v3
    return v4
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   mov rax, rdi
;   shr eax, eax, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   mov rax, rdi
;   shr eax, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ushr_i16_i128(i16, i128) -> i16 {
block0(v0: i16, v1: i128):
    v2 = ushr.i16 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   and rcx, rcx, $15
;   mov rax, rdi
;   shr ax, ax, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   and rcx, 0xf
;   mov rax, rdi
;   shr ax, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ushr_i8_i128(i8, i128) -> i8 {
block0(v0: i8, v1: i128):
    v2 = ushr.i8 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   and rcx, rcx, $7
;   mov rax, rdi
;   shr al, al, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   and rcx, 7
;   mov rax, rdi
;   shr al, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ushr_i64_i64(i64, i64) -> i64 {
block0(v0: i64, v1: i64):
    v2 = ushr.i64 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   mov rax, rdi
;   shr rax, rax, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   mov rax, rdi
;   shr rax, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ushr_i64_i32(i64, i32) -> i64 {
block0(v0: i64, v1: i32):
    v2 = ushr.i64 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   mov rax, rdi
;   shr rax, rax, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   mov rax, rdi
;   shr rax, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ushr_i64_i16(i64, i16) -> i64 {
block0(v0: i64, v1: i16):
    v2 = ushr.i64 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   mov rax, rdi
;   shr rax, rax, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   mov rax, rdi
;   shr rax, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ushr_i64_i8(i64, i8) -> i64 {
block0(v0: i64, v1: i8):
    v2 = ushr.i64 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   mov rax, rdi
;   shr rax, rax, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   mov rax, rdi
;   shr rax, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ushr_i32_i64(i32, i64) -> i32 {
block0(v0: i32, v1: i64):
    v2 = ushr.i32 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   mov rax, rdi
;   shr eax, eax, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   mov rax, rdi
;   shr eax, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ushr_i32_i32(i32, i32) -> i32 {
block0(v0: i32, v1: i32):
    v2 = ushr.i32 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   mov rax, rdi
;   shr eax, eax, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   mov rax, rdi
;   shr eax, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ushr_i32_i16(i32, i16) -> i32 {
block0(v0: i32, v1: i16):
    v2 = ushr.i32 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   mov rax, rdi
;   shr eax, eax, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   mov rax, rdi
;   shr eax, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ushr_i32_i8(i32, i8) -> i32 {
block0(v0: i32, v1: i8):
    v2 = ushr.i32 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   mov rax, rdi
;   shr eax, eax, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   mov rax, rdi
;   shr eax, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ushr_i16_i64(i16, i64) -> i16 {
block0(v0: i16, v1: i64):
    v2 = ushr.i16 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   and rcx, rcx, $15
;   mov rax, rdi
;   shr ax, ax, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   and rcx, 0xf
;   mov rax, rdi
;   shr ax, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ushr_i16_i32(i16, i32) -> i16 {
block0(v0: i16, v1: i32):
    v2 = ushr.i16 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   and rcx, rcx, $15
;   mov rax, rdi
;   shr ax, ax, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   and rcx, 0xf
;   mov rax, rdi
;   shr ax, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ushr_i16_i16(i16, i16) -> i16 {
block0(v0: i16, v1: i16):
    v2 = ushr.i16 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   and rcx, rcx, $15
;   mov rax, rdi
;   shr ax, ax, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   and rcx, 0xf
;   mov rax, rdi
;   shr ax, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ushr_i16_i8(i16, i8) -> i16 {
block0(v0: i16, v1: i8):
    v2 = ushr.i16 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   and rcx, rcx, $15
;   mov rax, rdi
;   shr ax, ax, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   and rcx, 0xf
;   mov rax, rdi
;   shr ax, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ushr_i8_i64(i8, i64) -> i8 {
block0(v0: i8, v1: i64):
    v2 = ushr.i8 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   and rcx, rcx, $7
;   mov rax, rdi
;   shr al, al, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   and rcx, 7
;   mov rax, rdi
;   shr al, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ushr_i8_i32(i8, i32) -> i8 {
block0(v0: i8, v1: i32):
    v2 = ushr.i8 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   and rcx, rcx, $7
;   mov rax, rdi
;   shr al, al, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   and rcx, 7
;   mov rax, rdi
;   shr al, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ushr_i8_i16(i8, i16) -> i8 {
block0(v0: i8, v1: i16):
    v2 = ushr.i8 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   and rcx, rcx, $7
;   mov rax, rdi
;   shr al, al, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   and rcx, 7
;   mov rax, rdi
;   shr al, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ushr_i8_i8(i8, i8) -> i8 {
block0(v0: i8, v1: i8):
    v2 = ushr.i8 v0, v1
    return v2
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rcx, rsi
;   and rcx, rcx, $7
;   mov rax, rdi
;   shr al, al, cl
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rcx, rsi
;   and rcx, 7
;   mov rax, rdi
;   shr al, cl
;   mov rsp, rbp
;   pop rbp
;   ret

function %ushr_i64_const(i64) -> i64 {
block0(v0: i64):
    v1 = ushr_imm.i64 v0, 65
    return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   shr rax, rax, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   shr rax, 1
;   mov rsp, rbp
;   pop rbp
;   ret

function %ushr_i32_const(i32) -> i32 {
block0(v0: i32):
    v1 = ushr_imm.i32 v0, 33
    return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   shr eax, eax, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   shr eax, 1
;   mov rsp, rbp
;   pop rbp
;   ret

function %ushr_i16_const(i16) -> i16 {
block0(v0: i16):
    v1 = ushr_imm.i16 v0, 17
    return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   shr ax, ax, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   shr ax, 1
;   mov rsp, rbp
;   pop rbp
;   ret

function %ushr_i8_const(i8) -> i8 {
block0(v0: i8):
    v1 = ushr_imm.i8 v0, 9
    return v1
}

; VCode:
;   push rbp
;   mov rbp, rsp
; block0:
;   mov rax, rdi
;   shr al, al, 0x1
;   mov rsp, rbp
;   pop rbp
;   ret
; 
; Disassembled:
; block0: ; offset 0x0
;   push rbp
;   mov rbp, rsp
; block1: ; offset 0x4
;   mov rax, rdi
;   shr al, 1
;   mov rsp, rbp
;   pop rbp
;   ret

